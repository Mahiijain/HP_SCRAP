[
  {
    "source": "man7.org",
    "title": "NAMEtop",
    "url": "https://man7.org/linux/man-pages/man1/intro.1.html",
    "content": "intro(1) - Linux manual page\nman7.org\n> Linux >\nman-pages\nLinux/UNIX system programming training\nintro(1) \u2014 Linux manual page\nNAME\n|\nDESCRIPTION\n|\nNOTES\n|\nSEE\u00a0ALSO\n|\nCOLOPHON\nintro\n(1)                 General Commands Manual\nintro\n(1)\nNAME\ntop\nintro - introduction to user commands\nDESCRIPTION\ntop\nSection 1 of the manual describes user commands and tools, for\n       example, file manipulation tools, shells, compilers, web browsers,\n       file and image viewers and editors, and so on.\nNOTES\ntop\nLinux is a flavor of UNIX, and user commands under UNIX work\n       similarly under Linux (and lots of other UNIX-like systems too,\n       like FreeBSD).\n\n       Under Linux, there are GUIs (graphical user interfaces), where you\n       can point and click and drag, and hopefully get work done without\n       first reading lots of documentation.  The traditional UNIX\n       environment is a CLI (command line interface), where you type\n       commands to tell the computer what to do.  This is faster and more\n       powerful, but requires finding out what the commands are and how\n       to use them.  Below is a bare minimum guide to get you started.\nLogin\nIn order to start working, you'll probably first have to open a\n       session.  The program\nlogin(1)\nwill wait for you to type your\n       username and password, and after that, it will start a\nshell\n(command interpreter) for you.  In case of a graphical login, you\n       get a screen with menus or icons and a mouse click will start a\n       shell in a window.  See also\nxterm\n(1).\nThe shell\nOne types commands into the\nshell\n, the command interpreter.  It is\n       not built-in; it is just another program.  You can change your\n       shell, and everybody has their own favorite one.  The standard one\n       is called\nsh\n.  See also\nash\n(1),\nbash(1)\n,\nchsh(1)\n,\ncsh\n(1),\ndash(1)\n,\nksh\n(1),\nzsh\n(1).\n\n       A session might look like this:\n\n           knuth login:\naeb\nPassword:\n********\n$\ndate\nTue Aug  6 23:50:44 CEST 2002\n           $\ncal\nAugust 2002\n           Su Mo Tu We Th Fr Sa\n                        1  2  3\n            4  5  6  7  8  9 10\n           11 12 13 14 15 16 17\n           18 19 20 21 22 23 24\n           25 26 27 28 29 30 31\n\n           $\nls\nbin  tel\n           $\nls -l\ntotal 2\n           drwxrwxr-x   2 aeb       1024 Aug  6 23:51 bin\n           -rw-rw-r--   1 aeb         37 Aug  6 23:52 tel\n           $\ncat tel\nmaja    0501-1136285\n           peter   0136-7399214\n           $\ncp tel tel2\n$\nls -l\ntotal 3\n           drwxr-xr-x   2 aeb       1024 Aug  6 23:51 bin\n           -rw-r--r--   1 aeb         37 Aug  6 23:52 tel\n           -rw-r--r--   1 aeb         37 Aug  6 23:53 tel2\n           $\nmv tel tel1\n$\nls -l\ntotal 3\n           drwxr-xr-x   2 aeb       1024 Aug  6 23:51 bin\n           -rw-r--r--   1 aeb         37 Aug  6 23:52 tel1\n           -rw-r--r--   1 aeb         37 Aug  6 23:53 tel2\n           $\ndiff tel1 tel2\n$\nrm tel1\n$\ngrep maja tel2\nmaja    0501-1136285\n           $\n\n       Here typing Control-D ended the session.\n\n       The\n$\nhere was the command prompt\u2014it is the shell's way of\n       indicating that it is ready for the next command.  The prompt can\n       be customized in lots of ways, and one might include stuff like\n       username, machine name, current directory, time, and so on.  An\n       assignment PS1=\"What next, master? \" would change the prompt as\n       indicated.\n\n       We see that there are commands\ndate\n(that gives date and time),\n       and\ncal\n(that gives a calendar).\n\n       The command\nls\nlists the contents of the current directory\u2014it\n       tells you what files you have.  With a\n-l\noption it gives a long\n       listing, that includes the owner and size and date of the file,\n       and the permissions people have for reading and/or changing the\n       file.  For example, the file \"tel\" here is 37 bytes long, owned by\n       aeb and the owner can read and write it, others can only read it.\n       Owner and permissions can be changed by the commands\nchown\nand\nchmod\n.\n\n       The command\ncat\nwill show the contents of a file.  (The name is\n       from \"concatenate and print\": all files given as parameters are\n       concatenated and sent to \"standard output\" (see\nstdout(3)\n), here\n       the terminal screen.)\n\n       The command\ncp\n(from \"copy\") will copy a file.\n\n       The command\nmv\n(from \"move\"), on the other hand, only renames it.\n\n       The command\ndiff\nlists the differences between two files.  Here\n       there was no output because there were no differences.\n\n       The command\nrm\n(from \"remove\") deletes the file, and be careful!\n       it is gone.  No wastepaper basket or anything.  Deleted means\n       lost.\n\n       The command\ngrep\n(from \"g/re/p\") finds occurrences of a string in\n       one or more files.  Here it finds Maja's telephone number.\nPathnames and the current directory\nFiles live in a large tree, the file hierarchy.  Each has a\npathname\ndescribing the path from the root of the tree (which is\n       called\n/\n) to the file.  For example, such a full pathname might be\n/home/aeb/tel\n.  Always using full pathnames would be inconvenient,\n       and the name of a file in the current directory may be abbreviated\n       by giving only the last component.  That is why\n/home/aeb/tel\ncan\n       be abbreviated to\ntel\nwhen the current directory is\n/home/aeb\n.\n\n       The command\npwd\nprints the current directory.\n\n       The command\ncd\nchanges the current directory.\n\n       Try alternatively\ncd\nand\npwd\ncommands and explore\ncd\nusage: \"cd\",\n       \"cd .\", \"cd ..\", \"cd /\", and \"cd ~\".\nDirectories\nThe command\nmkdir\nmakes a new directory.\n\n       The command\nrmdir\nremoves a directory if it is empty, and\n       complains otherwise.\n\n       The command\nfind\n(with a rather baroque syntax) will find files\n       with given name or other properties.  For example, \"find . -name\n       tel\" would find the file\ntel\nstarting in the present directory\n       (which is called\n.\n).  And \"find / -name tel\" would do the same,\n       but starting at the root of the tree.  Large searches on a multi-\n       GB disk will be time-consuming, and it may be better to use\nlocate(1)\n.\nDisks and filesystems\nThe command\nmount\nwill attach the filesystem found on some disk\n       (or floppy, or CDROM or so) to the big filesystem hierarchy.  And\numount\ndetaches it again.  The command\ndf\nwill tell you how much\n       of your disk is still free.\nProcesses\nOn a UNIX system many user and system processes run\n       simultaneously.  The one you are talking to runs in the\nforeground\n, the others in the\nbackground\n.  The command\nps\nwill\n       show you which processes are active and what numbers these\n       processes have.  The command\nkill\nallows you to get rid of them.\n       Without option this is a friendly request: please go away.  And\n       \"kill -9\" followed by the number of the process is an immediate\n       kill.  Foreground processes can often be killed by typing Control-\n       C.\nGetting information\nThere are thousands of commands, each with many options.\n       Traditionally commands are documented on\nman pages\n, (like this\n       one), so that the command \"man kill\" will document the use of the\n       command \"kill\" (and \"man man\" document the command \"man\").  The\n       program\nman\nsends the text through some\npager\n, usually\nless\n.  Hit\n       the space bar to get the next page, hit q to quit.\n\n       In documentation it is customary to refer to man pages by giving\n       the name and section number, as in\nman(1)\n.  Man pages are terse,\n       and allow you to find quickly some forgotten detail.  For\n       newcomers an introductory text with more examples and explanations\n       is useful.\n\n       A lot of GNU/FSF software is provided with info files.  Type \"info\n       info\" for an introduction on the use of the program\ninfo\n.\n\n       Special topics are often treated in HOWTOs.  Look in\n/usr/share/doc/howto/en\nand use a browser if you find HTML files\n       there.\nSEE ALSO\ntop\nash\n(1),\nbash(1)\n,\nchsh(1)\n,\ncsh\n(1),\ndash(1)\n,\nksh\n(1),\nlocate(1)\n,\nlogin(1)\n,\nman(1)\n,\nxterm\n(1),\nzsh\n(1),\nwait(2)\n,\nstdout(3)\n,\nman-pages(7)\n,\nstandards(7)\nCOLOPHON\ntop\nThis page is part of the\nman-pages\n(Linux kernel and C library\n       user-space interface documentation) project.  Information about\n       the project can be found at \n       \u27e8\nhttps://www.kernel.org/doc/man-pages/\n\u27e9.  If you have a bug report\n       for this manual page, see\n       \u27e8\nhttps://git.kernel.org/pub/scm/docs/man-pages/man-pages.git/tree/CONTRIBUTING\n\u27e9.\n       This page was obtained from the tarball man-pages-6.10.tar.gz\n       fetched from\n       \u27e8\nhttps://mirrors.edge.kernel.org/pub/linux/docs/man-pages/\n\u27e9 on\n       2025-02-02.  If you discover any rendering problems in this HTML\n       version of the page, or you believe there is a better or more up-\n       to-date source for the page, or you have corrections or\n       improvements to the information in this COLOPHON (which is\nnot\npart of the original manual page), send a mail to\n       man-pages@man7.org\nLinux man-pages 6.10            2024-06-17\nintro\n(1)\nPages that refer to this page:\nsortman(1)\n,\nintro(8)\nHTML rendering created 2025-02-02\n            by\nMichael Kerrisk\n,\n            author of\nThe Linux Programming Interface\n.\nFor details of in-depth\nLinux/UNIX system programming training courses\nthat I teach, look\nhere\n.\nHosting by\njambit GmbH\n."
  },
  {
    "source": "man7.org",
    "title": "NAMEtop",
    "url": "https://man7.org/linux/man-pages/man2/intro.2.html",
    "content": "intro(2) - Linux manual page\nman7.org\n> Linux >\nman-pages\nLinux/UNIX system programming training\nintro(2) \u2014 Linux manual page\nNAME\n|\nDESCRIPTION\n|\nRETURN\u00a0VALUE\n|\nSTANDARDS\n|\nNOTES\n|\nSEE\u00a0ALSO\n|\nCOLOPHON\nintro\n(2)                   System Calls Manual\nintro\n(2)\nNAME\ntop\nintro - introduction to system calls\nDESCRIPTION\ntop\nSection 2 of the manual describes the Linux system calls.  A\n       system call is an entry point into the Linux kernel.  Usually,\n       system calls are not invoked directly: instead, most system calls\n       have corresponding C library wrapper functions which perform the\n       steps required (e.g., trapping to kernel mode) in order to invoke\n       the system call.  Thus, making a system call looks the same as\n       invoking a normal library function.\n\n       In many cases, the C library wrapper function does nothing more\n       than:\n\n       \u2022  copying arguments and the unique system call number to the\n          registers where the kernel expects them;\n\n       \u2022  trapping to kernel mode, at which point the kernel does the\n          real work of the system call;\n\n       \u2022  setting\nerrno\nif the system call returns an error number when\n          the kernel returns the CPU to user mode.\n\n       However, in a few cases, a wrapper function may do rather more\n       than this, for example, performing some preprocessing of the\n       arguments before trapping to kernel mode, or postprocessing of\n       values returned by the system call.  Where this is the case, the\n       manual pages in Section 2 generally try to note the details of\n       both the (usually GNU) C library API interface and the raw system\n       call.  Most commonly, the main DESCRIPTION will focus on the C\n       library interface, and differences for the system call are covered\n       in the NOTES section.\n\n       For a list of the Linux system calls, see\nsyscalls(2)\n.\nRETURN VALUE\ntop\nOn error, most system calls return a negative error number (i.e.,\n       the negated value of one of the constants described in\nerrno(3)\n).\n       The C library wrapper hides this detail from the caller: when a\n       system call returns a negative value, the wrapper copies the\n       absolute value into the\nerrno\nvariable, and returns -1 as the\n       return value of the wrapper.\n\n       The value returned by a successful system call depends on the\n       call.  Many system calls return 0 on success, but some can return\n       nonzero values from a successful call.  The details are described\n       in the individual manual pages.\n\n       In some cases, the programmer must define a feature test macro in\n       order to obtain the declaration of a system call from the header\n       file specified in the man page SYNOPSIS section.  (Where required,\n       these feature test macros must be defined before including\nany\nheader files.)  In such cases, the required macro is described in\n       the man page.  For further information on feature test macros, see\nfeature_test_macros(7)\n.\nSTANDARDS\ntop\nCertain terms and abbreviations are used to indicate UNIX variants\n       and standards to which calls in this section conform.  See\nstandards(7)\n.\nNOTES\ntop\nCalling directly\nIn most cases, it is unnecessary to invoke a system call directly,\n       but there are times when the Standard C library does not implement\n       a nice wrapper function for you.  In this case, the programmer\n       must manually invoke the system call using\nsyscall(2)\n.\n       Historically, this was also possible using one of the _syscall\n       macros described in\n_syscall(2)\n.\nAuthors and copyright conditions\nLook at the header of the manual page source for the author(s) and\n       copyright conditions.  Note that these can be different from page\n       to page!\nSEE ALSO\ntop\n_syscall(2)\n,\nsyscall(2)\n,\nsyscalls(2)\n,\nerrno(3)\n,\nintro(3)\n,\ncapabilities(7)\n,\ncredentials(7)\n,\nfeature_test_macros(7)\n,\nmq_overview(7)\n,\npath_resolution(7)\n,\npipe(7)\n,\npty(7)\n,\nsem_overview(7)\n,\nshm_overview(7)\n,\nsignal(7)\n,\nsocket(7)\n,\nstandards(7)\n,\nsymlink(7)\n,\nsystem_data_types(7)\n,\nsysvipc(7)\n,\ntime(7)\nCOLOPHON\ntop\nThis page is part of the\nman-pages\n(Linux kernel and C library\n       user-space interface documentation) project.  Information about\n       the project can be found at \n       \u27e8\nhttps://www.kernel.org/doc/man-pages/\n\u27e9.  If you have a bug report\n       for this manual page, see\n       \u27e8\nhttps://git.kernel.org/pub/scm/docs/man-pages/man-pages.git/tree/CONTRIBUTING\n\u27e9.\n       This page was obtained from the tarball man-pages-6.10.tar.gz\n       fetched from\n       \u27e8\nhttps://mirrors.edge.kernel.org/pub/linux/docs/man-pages/\n\u27e9 on\n       2025-02-02.  If you discover any rendering problems in this HTML\n       version of the page, or you believe there is a better or more up-\n       to-date source for the page, or you have corrections or\n       improvements to the information in this COLOPHON (which is\nnot\npart of the original manual page), send a mail to\n       man-pages@man7.org\nLinux man-pages 6.10            2024-05-02\nintro\n(2)\nPages that refer to this page:\nsyscall(2)\n,\n_syscall(2)\n,\nsyscalls(2)\n,\nintro(3)\n,\nman-pages(7)\nHTML rendering created 2025-02-02\n            by\nMichael Kerrisk\n,\n            author of\nThe Linux Programming Interface\n.\nFor details of in-depth\nLinux/UNIX system programming training courses\nthat I teach, look\nhere\n.\nHosting by\njambit GmbH\n."
  },
  {
    "source": "man7.org",
    "title": "NAMEtop",
    "url": "https://man7.org/linux/man-pages/man3/intro.3.html",
    "content": "intro(3) - Linux manual page\nman7.org\n> Linux >\nman-pages\nLinux/UNIX system programming training\nintro(3) \u2014 Linux manual page\nNAME\n|\nDESCRIPTION\n|\nSTANDARDS\n|\nNOTES\n|\nSEE\u00a0ALSO\n|\nCOLOPHON\nintro\n(3)                 Library Functions Manual\nintro\n(3)\nNAME\ntop\nintro - introduction to library functions\nDESCRIPTION\ntop\nSection 3 of the manual describes all library functions excluding\n       the library functions (system call wrappers) described in Section\n       2, which implement system calls.\n\n       Many of the functions described in the section are part of the\n       Standard C Library (\nlibc\n).  Some functions are part of other\n       libraries (e.g., the math library,\nlibm\n, or the real-time library,\nlibrt\n) in which case the manual page will indicate the linker\n       option needed to link against the required library (e.g.,\n-lm\nand\n-lrt\n, respectively, for the aforementioned libraries).\n\n       In some cases, the programmer must define a feature test macro in\n       order to obtain the declaration of a function from the header file\n       specified in the man page SYNOPSIS section.  (Where required,\n       these\nfeature test macros\nmust be defined before including\nany\nheader files.)  In such cases, the required macro is described in\n       the man page.  For further information on feature test macros, see\nfeature_test_macros(7)\n.\nSubsections\nSection 3 of this manual is organized into subsections that\n       reflect the complex structure of the standard C library and its\n       many implementations:\n\n       \u2022  3const\n\n       \u2022  3head\n\n       \u2022  3type\n\n       This difficult history frequently makes it a poor example to\n       follow in design, implementation, and presentation.\n\n       Ideally, a library for the C language is designed such that each\n       header file presents the interface to a coherent software module.\n       It provides a small number of function declarations and exposes\n       only data types and constants that are required for use of those\n       functions.  Together, these are termed an API or\napplication\nprogram interface\n.  Types and constants to be shared among\n       multiple APIs should be placed in header files that declare no\n       functions.  This organization permits a C library module to be\n       documented concisely with one header file per manual page.  Such\n       an approach improves the readability and accessibility of library\n       documentation, and thereby the usability of the software.\nSTANDARDS\ntop\nCertain terms and abbreviations are used to indicate UNIX variants\n       and standards to which calls in this section conform.  See\nstandards(7)\n.\nNOTES\ntop\nAuthors and copyright conditions\nLook at the header of the manual page source for the author(s) and\n       copyright conditions.  Note that these can be different from page\n       to page!\nSEE ALSO\ntop\nintro(2)\n,\nerrno(3)\n,\ncapabilities(7)\n,\ncredentials(7)\n,\nenviron(7)\n,\nfeature_test_macros(7)\n,\nlibc(7)\n,\nmath_error(7)\n,\npath_resolution(7)\n,\npthreads(7)\n,\nsignal(7)\n,\nstandards(7)\n,\nsystem_data_types(7)\nCOLOPHON\ntop\nThis page is part of the\nman-pages\n(Linux kernel and C library\n       user-space interface documentation) project.  Information about\n       the project can be found at \n       \u27e8\nhttps://www.kernel.org/doc/man-pages/\n\u27e9.  If you have a bug report\n       for this manual page, see\n       \u27e8\nhttps://git.kernel.org/pub/scm/docs/man-pages/man-pages.git/tree/CONTRIBUTING\n\u27e9.\n       This page was obtained from the tarball man-pages-6.10.tar.gz\n       fetched from\n       \u27e8\nhttps://mirrors.edge.kernel.org/pub/linux/docs/man-pages/\n\u27e9 on\n       2025-02-02.  If you discover any rendering problems in this HTML\n       version of the page, or you believe there is a better or more up-\n       to-date source for the page, or you have corrections or\n       improvements to the information in this COLOPHON (which is\nnot\npart of the original manual page), send a mail to\n       man-pages@man7.org\nLinux man-pages 6.10            2024-05-02\nintro\n(3)\nPages that refer to this page:\nintro(2)\nHTML rendering created 2025-02-02\n            by\nMichael Kerrisk\n,\n            author of\nThe Linux Programming Interface\n.\nFor details of in-depth\nLinux/UNIX system programming training courses\nthat I teach, look\nhere\n.\nHosting by\njambit GmbH\n."
  },
  {
    "source": "man7.org",
    "title": "NAMEtop",
    "url": "https://man7.org/linux/man-pages/man4/intro.4.html",
    "content": "intro(4) - Linux manual page\nman7.org\n> Linux >\nman-pages\nLinux/UNIX system programming training\nintro(4) \u2014 Linux manual page\nNAME\n|\nDESCRIPTION\n|\nFILES\n|\nNOTES\n|\nSEE\u00a0ALSO\n|\nCOLOPHON\nintro\n(4)                 Kernel Interfaces Manual\nintro\n(4)\nNAME\ntop\nintro - introduction to special files\nDESCRIPTION\ntop\nSection 4 of the manual describes special files (devices).\nFILES\ntop\n/dev/* \u2014 device files\nNOTES\ntop\nAuthors and copyright conditions\nLook at the header of the manual page source for the author(s) and\n       copyright conditions.  Note that these can be different from page\n       to page!\nSEE ALSO\ntop\nmknod(1)\n,\nmknod(2)\n,\nstandards(7)\nCOLOPHON\ntop\nThis page is part of the\nman-pages\n(Linux kernel and C library\n       user-space interface documentation) project.  Information about\n       the project can be found at \n       \u27e8\nhttps://www.kernel.org/doc/man-pages/\n\u27e9.  If you have a bug report\n       for this manual page, see\n       \u27e8\nhttps://git.kernel.org/pub/scm/docs/man-pages/man-pages.git/tree/CONTRIBUTING\n\u27e9.\n       This page was obtained from the tarball man-pages-6.10.tar.gz\n       fetched from\n       \u27e8\nhttps://mirrors.edge.kernel.org/pub/linux/docs/man-pages/\n\u27e9 on\n       2025-02-02.  If you discover any rendering problems in this HTML\n       version of the page, or you believe there is a better or more up-\n       to-date source for the page, or you have corrections or\n       improvements to the information in this COLOPHON (which is\nnot\npart of the original manual page), send a mail to\n       man-pages@man7.org\nLinux man-pages 6.10            2024-05-02\nintro\n(4)\nHTML rendering created 2025-02-02\n            by\nMichael Kerrisk\n,\n            author of\nThe Linux Programming Interface\n.\nFor details of in-depth\nLinux/UNIX system programming training courses\nthat I teach, look\nhere\n.\nHosting by\njambit GmbH\n."
  },
  {
    "source": "man7.org",
    "title": "NAMEtop",
    "url": "https://man7.org/linux/man-pages/man5/intro.5.html",
    "content": "intro(5) - Linux manual page\nman7.org\n> Linux >\nman-pages\nLinux/UNIX system programming training\nintro(5) \u2014 Linux manual page\nNAME\n|\nDESCRIPTION\n|\nNOTES\n|\nSEE\u00a0ALSO\n|\nCOLOPHON\nintro\n(5)                   File Formats Manual\nintro\n(5)\nNAME\ntop\nintro - introduction to file formats and filesystems\nDESCRIPTION\ntop\nSection 5 of the manual describes various file formats, as well as\n       the corresponding C structures, if any.\n\n       In addition, this section contains a number of pages that document\n       various filesystems.\nNOTES\ntop\nAuthors and copyright conditions\nLook at the header of the manual page source for the author(s) and\n       copyright conditions.  Note that these can be different from page\n       to page!\nSEE ALSO\ntop\nstandards(7)\nCOLOPHON\ntop\nThis page is part of the\nman-pages\n(Linux kernel and C library\n       user-space interface documentation) project.  Information about\n       the project can be found at \n       \u27e8\nhttps://www.kernel.org/doc/man-pages/\n\u27e9.  If you have a bug report\n       for this manual page, see\n       \u27e8\nhttps://git.kernel.org/pub/scm/docs/man-pages/man-pages.git/tree/CONTRIBUTING\n\u27e9.\n       This page was obtained from the tarball man-pages-6.10.tar.gz\n       fetched from\n       \u27e8\nhttps://mirrors.edge.kernel.org/pub/linux/docs/man-pages/\n\u27e9 on\n       2025-02-02.  If you discover any rendering problems in this HTML\n       version of the page, or you believe there is a better or more up-\n       to-date source for the page, or you have corrections or\n       improvements to the information in this COLOPHON (which is\nnot\npart of the original manual page), send a mail to\n       man-pages@man7.org\nLinux man-pages 6.10            2024-05-02\nintro\n(5)\nHTML rendering created 2025-02-02\n            by\nMichael Kerrisk\n,\n            author of\nThe Linux Programming Interface\n.\nFor details of in-depth\nLinux/UNIX system programming training courses\nthat I teach, look\nhere\n.\nHosting by\njambit GmbH\n."
  },
  {
    "source": "archlinux.org",
    "title": "Category:English",
    "url": "https://wiki.archlinux.org/title/Category:English",
    "content": "Category:English - ArchWiki\nHome\nPackages\nForums\nWiki\nGitLab\nSecurity\nAUR\nDownload\nJump to content\nMain menu\nMain menu\nmove to sidebar\nhide\nNavigation\nMain page\nTable of contents\nGetting involved\nWiki news\nRandom page\nInteraction\nHelp\nContributing\nRecent changes\nRecent talks\nNew pages\nStatistics\nRequests\nArchWiki\nSearch\nSearch\nAppearance\nCreate account\nLog in\nPersonal tools\nCreate account\nLog in\nCategory\n:\nEnglish\nCategory\nDiscussion\nEnglish\nRead\nView source\nView history\nTools\nTools\nmove to sidebar\nhide\nActions\nRead\nView source\nView history\nGeneral\nWhat links here\nRelated changes\nSpecial pages\nPrintable version\nPermanent link\nPage information\nAppearance\nmove to sidebar\nhide\nHelp\nFrom ArchWiki\nSubcategories\nThis category has the following 8 subcategories, out of 8 total.\nA\nAbout Arch\nD\nDevelopment\nDisambiguation pages\nH\nHardware\nL\nLists\nN\nNetworking\nS\nSoftware\nSystem administration\nPages in category \"English\"\nThe following 2 pages are in this category, out of 2 total.\nM\nMain page\nT\nTable of contents\nRetrieved from \"\nhttps://wiki.archlinux.org/index.php?title=Category:English&oldid=720655\n\"\nCategory\n:\nLanguages\nThis page was last edited on 28 February 2022, at 07:19.\nContent is available under\nGNU Free Documentation License 1.3 or later\nunless otherwise noted.\nPrivacy policy\nAbout ArchWiki\nDisclaimers\nCode of conduct\nTerms of service"
  },
  {
    "source": "archlinux.org",
    "title": "Category:About Arch",
    "url": "https://wiki.archlinux.org/title/Category:About_Arch",
    "content": "Category:About Arch - ArchWiki\nHome\nPackages\nForums\nWiki\nGitLab\nSecurity\nAUR\nDownload\nJump to content\nMain menu\nMain menu\nmove to sidebar\nhide\nNavigation\nMain page\nTable of contents\nGetting involved\nWiki news\nRandom page\nInteraction\nHelp\nContributing\nRecent changes\nRecent talks\nNew pages\nStatistics\nRequests\nArchWiki\nSearch\nSearch\nAppearance\nCreate account\nLog in\nPersonal tools\nCreate account\nLog in\nCategory\n:\nAbout Arch\n28 languages\n\u0627\u0644\u0639\u0631\u0628\u064a\u0629\nBosanski\nCatal\u00e0\n\u010ce\u0161tina\nDansk\n\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\nEspa\u00f1ol\nSuomi\nFran\u00e7ais\n\u05e2\u05d1\u05e8\u05d9\u05ea\nMagyar\nBahasa Indonesia\nItaliano\n\u65e5\u672c\u8a9e\n\ud55c\uad6d\uc5b4\nLietuvi\u0173\nNederlands\nPolski\nPortugu\u00eas\n\u0420\u0443\u0441\u0441\u043a\u0438\u0439\nSloven\u010dina\n\u0421\u0440\u043f\u0441\u043a\u0438 / srpski\nSvenska\n\u0e44\u0e17\u0e22\nT\u00fcrk\u00e7e\n\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n\u4e2d\u6587\uff08\u7b80\u4f53\uff09\n\u4e2d\u6587\uff08\u7e41\u9ad4\uff09\nCategory\nDiscussion\nEnglish\nRead\nView source\nView history\nTools\nTools\nmove to sidebar\nhide\nActions\nRead\nView source\nView history\nGeneral\nWhat links here\nRelated changes\nSpecial pages\nPrintable version\nPermanent link\nPage information\nAppearance\nmove to sidebar\nhide\nHelp\nFrom ArchWiki\nThe main article for this category is\nArch Linux\n.\nSubcategories\nThis category has the following 5 subcategories, out of 5 total.\nA\nArch community\nArchWiki\nI\nInstallation process\nL\nLive Arch systems\nT\nTeams\nPages in category \"About Arch\"\nThe following 18 pages are in this category, out of 18 total.\nA\nArch boot process\nArch build system\nArch compared to other distributions\nArch is the best\nArch Linux\nArch Linux April Jokes\nArch Linux press coverage\nArch terminology\nArch User Repository\nArch-based distributions\nASCII art\nAUR submission guidelines\nC\nCreating packages\nF\nFrequently asked questions\nG\nGetting involved\nM\nMakepkg\nMirrors\nO\nOfficial repositories\nRetrieved from \"\nhttps://wiki.archlinux.org/index.php?title=Category:About_Arch&oldid=813538\n\"\nCategory\n:\nEnglish\nThis page was last edited on 31 July 2024, at 06:06.\nContent is available under\nGNU Free Documentation License 1.3 or later\nunless otherwise noted.\nPrivacy policy\nAbout ArchWiki\nDisclaimers\nCode of conduct\nTerms of service"
  },
  {
    "source": "archlinux.org",
    "title": "Category:Arch community",
    "url": "https://wiki.archlinux.org/title/Category:Arch_community",
    "content": "Category:Arch community - ArchWiki\nHome\nPackages\nForums\nWiki\nGitLab\nSecurity\nAUR\nDownload\nJump to content\nMain menu\nMain menu\nmove to sidebar\nhide\nNavigation\nMain page\nTable of contents\nGetting involved\nWiki news\nRandom page\nInteraction\nHelp\nContributing\nRecent changes\nRecent talks\nNew pages\nStatistics\nRequests\nArchWiki\nSearch\nSearch\nAppearance\nCreate account\nLog in\nPersonal tools\nCreate account\nLog in\nCategory\n:\nArch community\n12 languages\nBosanski\nCatal\u00e0\n\u010ce\u0161tina\nEspa\u00f1ol\nFran\u00e7ais\nItaliano\n\u65e5\u672c\u8a9e\n\ud55c\uad6d\uc5b4\nLietuvi\u0173\nPolski\nPortugu\u00eas\n\u4e2d\u6587\uff08\u7b80\u4f53\uff09\nCategory\nDiscussion\nEnglish\nRead\nView source\nView history\nTools\nTools\nmove to sidebar\nhide\nActions\nRead\nView source\nView history\nGeneral\nWhat links here\nRelated changes\nSpecial pages\nPrintable version\nPermanent link\nPage information\nAppearance\nmove to sidebar\nhide\nHelp\nFrom ArchWiki\nThe main article for this category is\nGetting involved\n.\nPages in category \"Arch community\"\nThe following 3 pages are in this category, out of 3 total.\nA\nArch IRC channels\nG\nGeneral guidelines\nI\nInternational communities\nRetrieved from \"\nhttps://wiki.archlinux.org/index.php?title=Category:Arch_community&oldid=809734\n\"\nCategory\n:\nAbout Arch\nThis page was last edited on 31 May 2024, at 07:23.\nContent is available under\nGNU Free Documentation License 1.3 or later\nunless otherwise noted.\nPrivacy policy\nAbout ArchWiki\nDisclaimers\nCode of conduct\nTerms of service"
  },
  {
    "source": "archlinux.org",
    "title": "Category:ArchWiki",
    "url": "https://wiki.archlinux.org/title/Category:ArchWiki",
    "content": "Category:ArchWiki - ArchWiki\nHome\nPackages\nForums\nWiki\nGitLab\nSecurity\nAUR\nDownload\nJump to content\nMain menu\nMain menu\nmove to sidebar\nhide\nNavigation\nMain page\nTable of contents\nGetting involved\nWiki news\nRandom page\nInteraction\nHelp\nContributing\nRecent changes\nRecent talks\nNew pages\nStatistics\nRequests\nArchWiki\nSearch\nSearch\nAppearance\nCreate account\nLog in\nPersonal tools\nCreate account\nLog in\nCategory\n:\nArchWiki\n24 languages\n\u0627\u0644\u0639\u0631\u0628\u064a\u0629\nBosanski\nCatal\u00e0\n\u010ce\u0161tina\n\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\nEspa\u00f1ol\nSuomi\nFran\u00e7ais\nHrvatski\nMagyar\nBahasa Indonesia\nItaliano\n\u65e5\u672c\u8a9e\n\ud55c\uad6d\uc5b4\nLietuvi\u0173\nNederlands\nPolski\nPortugu\u00eas\n\u0420\u0443\u0441\u0441\u043a\u0438\u0439\nSloven\u010dina\nT\u00fcrk\u00e7e\n\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n\u4e2d\u6587\uff08\u7b80\u4f53\uff09\n\u4e2d\u6587\uff08\u7e41\u9ad4\uff09\nCategory\nDiscussion\nEnglish\nRead\nView source\nView history\nTools\nTools\nmove to sidebar\nhide\nActions\nRead\nView source\nView history\nGeneral\nWhat links here\nRelated changes\nSpecial pages\nPrintable version\nPermanent link\nPage information\nAppearance\nmove to sidebar\nhide\nHelp\nFrom ArchWiki\nThe main article for this category is\nArchWiki:About\n.\nSubcategories\nThis category has only the following subcategory.\nH\nHelp\nPages in category \"ArchWiki\"\nThe following 10 pages are in this category, out of 10 total.\nA\nArchWiki:About\nArchWiki:Access levels and roles\nArchWiki:Archive\nB\nArchWiki:Bots\nC\nArchWiki:Contributing\nI\nArchWiki:IRC\nM\nArchWiki:Maintenance Team\nN\nArchWiki:News\nS\nArchWiki:Statistics\nT\nArchWiki:Translation Team\nRetrieved from \"\nhttps://wiki.archlinux.org/index.php?title=Category:ArchWiki&oldid=770308\n\"\nCategory\n:\nAbout Arch\nThis page was last edited on 4 March 2023, at 14:46.\nContent is available under\nGNU Free Documentation License 1.3 or later\nunless otherwise noted.\nPrivacy policy\nAbout ArchWiki\nDisclaimers\nCode of conduct\nTerms of service"
  },
  {
    "source": "archlinux.org",
    "title": "Category:Help",
    "url": "https://wiki.archlinux.org/title/Category:Help",
    "content": "Category:Help - ArchWiki\nHome\nPackages\nForums\nWiki\nGitLab\nSecurity\nAUR\nDownload\nJump to content\nMain menu\nMain menu\nmove to sidebar\nhide\nNavigation\nMain page\nTable of contents\nGetting involved\nWiki news\nRandom page\nInteraction\nHelp\nContributing\nRecent changes\nRecent talks\nNew pages\nStatistics\nRequests\nArchWiki\nSearch\nSearch\nAppearance\nCreate account\nLog in\nPersonal tools\nCreate account\nLog in\nCategory\n:\nHelp\n16 languages\nBosanski\nCatal\u00e0\n\u010ce\u0161tina\nDeutsch\n\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\nEspa\u00f1ol\nSuomi\nFran\u00e7ais\nItaliano\n\u65e5\u672c\u8a9e\nPolski\nPortugu\u00eas\n\u0420\u0443\u0441\u0441\u043a\u0438\u0439\nT\u00fcrk\u00e7e\n\u4e2d\u6587\uff08\u7b80\u4f53\uff09\n\u4e2d\u6587\uff08\u7e41\u9ad4\uff09\nCategory\nDiscussion\nEnglish\nRead\nView source\nView history\nTools\nTools\nmove to sidebar\nhide\nActions\nRead\nView source\nView history\nGeneral\nWhat links here\nRelated changes\nSpecial pages\nPrintable version\nPermanent link\nPage information\nAppearance\nmove to sidebar\nhide\nHelp\nFrom ArchWiki\nWelcome to the Help section. Here you will find resources and guidelines for ArchWiki editing. Browse this section, and get to know the ArchWiki if you want to help the community by creating or translating content.\nPages in category \"Help\"\nThe following 16 pages are in this category, out of 16 total.\nA\nHelp:Article naming guidelines\nB\nHelp:Browsing\nC\nHelp:Category\nHelp:Cheatsheet\nD\nHelp:Discussion\nE\nHelp:Editing\nHelp:Effective use of headers\nI\nHelp:I18n\nL\nHelp:Laptop page guidelines\nP\nHelp:Procedures\nR\nHelp:Reading\nS\nHelp:Style\nHelp:Style/Formatting and punctuation\nHelp:Style/White space\nT\nHelp:Template\nW\nHelp:Writing article introductions\nRetrieved from \"\nhttps://wiki.archlinux.org/index.php?title=Category:Help&oldid=770551\n\"\nCategory\n:\nArchWiki\nThis page was last edited on 4 March 2023, at 14:52.\nContent is available under\nGNU Free Documentation License 1.3 or later\nunless otherwise noted.\nPrivacy policy\nAbout ArchWiki\nDisclaimers\nCode of conduct\nTerms of service"
  },
  {
    "source": "linuxhint.com",
    "title": "30 python scripts examples",
    "url": "https://linuxhint.com/python_scripts_beginners_guide/",
    "content": "30 python scripts examples\nHome\nYouTube\nPython\n30 python scripts examples\n5 years ago\nby\nFahmida Yesmin\nPython is a very popular and demanding programming language now because it is suitable for developing very simple to complex applications. If you are new in python programming and want to learn the python from the basics in a short time, then this article is for you. 30 python scripts examples are explained in this article by using very simple examples to know the basics of the python.The list of topics that covered in this article are mentioned below.\nWe recommend buying our\nPython Language Cheat Sheet\nfrom Amazon to have on your desk as you are learning.\n01.\nHello World\n02.\nJoin two strings\n03.\nFormat floating point in the string\n04.\nRaise a number to a power\n05.\nWorking with Boolean types\n06.\nIf else statement\n07.\nUsing AND and OR operators\n08.\nSwitch case statement\n09.\nWhile Loop\n10.\nFor Loop\n11.\nRun one Python script from another\n12.\nUse of a command-line argument\n13.\nUse of regex\n14.\nUse of getpass\n15.\nUse of date format\n16.\nAdd and remove the item from a list\n17.\nList comprehension\n18.\nSlice data\n19.\nAdd and search data in the dictionary\n20.\nAdd and search data in the set\n21.\nCount items in the list\n22.\nDefine and call a function\n23.\nUse of throw and catch exception\n24.\nRead and Write File\n25.\nList files in a directory\n26.\nRead and write using pickle\n27.\nDefine class and method\n28.\nUse of range function\n29.\nUse of map function\n30.\nUse of filter function\nCreate and execute the first python script:\nYou can write and execute a simple python script from the terminal without creating any python file. If the script is large, then it requires writing and saves the script in any python file by using any editor. You can use any text editor or any code editor like sublime, Visual Studio Code, or any IDE software developed for python only like PyCharm or Spyder to write the script. The extension of the python file is\n.py\n. The python version\n3.8\nand the\nspyder3\nIDE of python are used in this article to write the python script. You have to install\nspyder\nIDE in your system to use it.\nIf you want to execute any script from the terminal, then run the \u2018\npython\u2019\nor \u2018\npython3\u2019\ncommand to open python in interaction mode. The following python script will print the text \u201c\nHello World\n\u201d as output.\n>>>\nprint\n(\n\"Hello World\"\n)\nNow, save the script in a file named\nc1.py\n. You have to run the following command from the terminal to execute\nc1.py\n.\n$ python3 c1.py\nIf you want to run the file from\nspyder3\nIDE, then you have to click on the\nrun\nbutton\nof the editor. The following output will show in the editor after executing the code.\nTop\nJoining two strings:\nThere are many ways to join string values in python. The most simple way to combine two string values in python is to use the \u2018+\u2019 operator. Create any python with the following script to know the way to join two strings. Here, two string values are assigned in two variables, and another variable is used to store the joined values that are printed later.\nc2.py\nstring1\n=\n\"Linux\"\nstring2\n=\n\"Hint\"\njoined_string\n=\nstring1 + string2\nprint\n(\njoined_string\n)\nThe following output will appear after running the script from the editor. Here, two words, \u201c\nLinux\n\u201d and \u201c\nHint\n\u201d are joined, and \u201c\nLinuxHint\n\u201d is printed as output.\nIf you want to know more about the other joining option in python, then you can check the tutorial,\nPython String Concatenation\n.\nTop\nFormat floating point in the string:\nFloating point number is required in programming for generating fractional numbers, and sometimes it requires formatting the floating-point number for programming purposes. There are many ways to exist in python to format the floating-point number. String formatting and string interpolation are used in the following script to format a floating-point number.\nformat()\nmethod with format width is used in string formatting, and \u2018%\u201d symbol with the format with width is used in string interpolation. According to the formatting width, 5 digits are set before the decimal point, and 2 digits are set after the decimal point.\nc3.py\n# Use of String Formatting\nfloat1\n=\n563.78453\nprint\n(\n\"{:5.2f}\"\n.\nformat\n(\nfloat1\n)\n)\n# Use of String Interpolation\nfloat2\n=\n563.78453\nprint\n(\n\"%5.2f\"\n% float2\n)\nThe following output will appear after running the script from the editor.\nIf you want to know more about string formatting in python, then you can check the tutorial,\nPython String Formatting\n.\nTop\nRaise a number to a power:\nMany ways exist in python to calculate the\nx\nn\nin Python. In the following script, three ways are shown to calculate the\nxn\nin Python. Double \u2018\n*\u2019\noperator,\npow()\nmethod, and\nmath.pow()\nmethod are used for calculating the xn. The values of\nx\nand\nn\nare initialized with numeric values. Double \u2018\n*\u2019\nand\npow()\nmethods are used for calculating the power of integer values.\nmath.pow()\ncan calculate the power of fractional numbers; also, that is shown in the last part of the script.\nc4.py\nimport\nmath\n# Assign values to x and n\nx\n=\n4\nn\n=\n3\n# Method 1\npower\n=\nx ** n\nprint\n(\n\"%d to the power %d is %d\"\n%\n(\nx\n,\nn\n,\npower\n)\n)\n# Method 2\npower\n=\npow\n(\nx\n,\nn\n)\nprint\n(\n\"%d to the power %d is %d\"\n%\n(\nx\n,\nn\n,\npower\n)\n)\n# Method 3\npower\n=\nmath\n.\npow\n(\n2\n,\n6.5\n)\nprint\n(\n\"%d to the power %d is %5.2f\"\n%\n(\nx\n,\nn\n,\npower\n)\n)\nThe following output will appear after running the script. The first two outputs show the result of\n4\n3,\nand the third output shows the result of\n2\n6.5\n.\nTop\nWorking with Boolean types:\nThe different uses of Boolean types are shown in the following script. The first output will print the value of val1 that contains the Boolean value,\ntrue.\nAll positive are negative numbers return\ntrue\nas Boolean value and only zero returns\nfalse\nas a Boolean value. So, the second and third outputs will print\ntrue\nfor positive and negative numbers. The fourth output will print false for 0, and the fifth output will print\nfalse\nbecause the comparison operator returns\nfalse\n.\nc5.py\n# Boolean value\nval1\n=\nTrue\nprint\n(\nval1\n)\n# Number to Boolean\nnumber\n=\n10\nprint\n(\nbool\n(\nnumber\n)\n)\nnumber\n=\n-\n5\nprint\n(\nbool\n(\nnumber\n)\n)\nnumber\n=\n0\nprint\n(\nbool\n(\nnumber\n)\n)\n# Boolean from comparison operator\nval1\n=\n6\nval2\n=\n3\nprint\n(\nval1\n<\nval2\n)\nThe following output will appear after running the script.\nTop\nUse of If else statement:\nThe following script shows the use of a conditional statement in python. The declaration of\nthe if-else\nstatement in python is a little bit different than other languages. No curly brackets are required to define the if-else block in python like other languages, but the indentation block must be used properly other the script will show an error. Here, a very simple\nif-else\nstatement is used in the script that will check the value of the number variable is more than or equal to 70or not. A\ncolon(:)\nis used after the \u2018\nif\u2019\nand \u2018\nelse\u2019\nblock to define the starting of the block.\nc6.py\n# Assign a numeric value\nnumber\n=\n70\n# Check the is more than 70 or not\nif\n(\nnumber\n>=\n70\n)\n:\nprint\n(\n\"You have passed\"\n)\nelse\n:\nprint\n(\n\"You have not passed\"\n)\nThe following output will appear after running the script.\nTop\nUse of AND and OR operators:\nThe following script shows the uses of\nAND\nand\nOR\noperators in the conditional statement.\nAND\noperator returns\ntrue\nwhen the two conditions return\ntrue,\nand\nOR\noperator returns\ntrue\nwhen any condition of two conditions returns\ntrue\n. Two floating-point numbers will be taken as MCQ and theory marks. Both AND and OR operators are used in the \u2018\nif\u2019\nstatement. According to the condition, if the MCQ marks are more than equal to 40 and theory marks is more than or equal to 30 then the \u2018\nif\u2019\nstatement will return\ntrue\nor if the total of MCQ and theory is more than or equal to 70 then the \u2018\nif\u2019\nstatement will also return\ntrue\n.\nc7.py\n# Take MCQ marks\nmcq_marks\n=\nfloat\n(\ninput\n(\n\"Enter the MCQ marks: \"\n)\n)\n# Take theory marks\ntheory_marks\n=\nfloat\n(\ninput\n(\n\"Enter the Theory marks: \"\n)\n)\n# Check the passing condition using AND and OR operator\nif\n(\nmcq_marks\n>=\n40\nand\ntheory_marks\n>=\n30\n)\nor\n(\nmcq_marks + theory_marks\n)\n>=\n70\n:\nprint\n(\n\"\n\\n\nYou have passed\"\n)\nelse\n:\nprint\n(\n\"\n\\n\nYou have failed\"\n)\nAccording to the following output,\nif\nstatement returns\nfalse\nfor the input values 30 and 35, and returns\ntrue\nfor the input values 40 and 45.\nTop\nswitch case statement:\nPython does not support\na switch-case\nstatement like other standard programming languages, but this type of statement can be implemented in python by using a custom function.\nemployee_details()\nfunction is created in the following script to work like the switch-case statement. The function contains one parameter and a dictionary named\nswitcher.\nThe value of the function parameter is checked with each index of the dictionary. If any match found, then the corresponding value of the index will be returned from the function; otherwise, the second parameter value of the\nswitcher.get()\nmethod will be returned.\nc8.py\n# Switcher for implementing switch case options\ndef\nemployee_details\n(\nID\n)\n:\nswitcher\n=\n{\n\"1004\"\n:\n\"Employee Name: MD. Mehrab\"\n,\n\"1009\"\n:\n\"Employee Name: Mita Rahman\"\n,\n\"1010\"\n:\n\"Employee Name: Sakib Al Hasan\"\n,\n}\n'''The first argument will be returned if the match found and\nnothing will be returned if no match found'''\nreturn\nswitcher.\nget\n(\nID\n,\n\"nothing\"\n)\n# Take the employee ID\nID\n=\ninput\n(\n\"Enter the employee ID: \"\n)\n# Print the output\nprint\n(\nemployee_details\n(\nID\n)\n)\nAccording to the following output, the script is executed two times, and two employee names are printed based on the ID values.\nTop\nUse of while Loop:\nThe use of a while loop in python is shown in the following example. The colon(:) is used to define the starting block of the loop, and all statements of the loop must be defined using proper indentation; otherwise, indentation error will appear. In the following script,\nthe counter\nvalue is initialized to\n1\nthat is used in the loop. The loop will iterate 5 times and print the values of the counter in each iteration. The\ncounter\nvalue is incremented by 1 in each iteration to reach the termination condition of the loop.\nc9.py\n# Initialize counter\ncounter\n=\n1\n# Iterate the loop 5 times\nwhile\ncounter\n<\n6\n:\n# Print the counter value\nprint\n(\n\"The current counter value: %d\"\n% counter\n)\n# Increment the counter\ncounter\n=\ncounter +\n1\nThe following output will appear after running the script.\nTop\nUse of for Loop:\nfor loop is used for many purposes in python. The starting block of this loop is required to define by a colon(:), and the statements are defined by using proper indentation. In the following script, a list of weekday names is defined, and a for loop is used to iterate and print each item of the list. Here, len() method is used to count the total items of the list and define the limit of the range() function.\nc10.py\n# Initialize the list\nweekdays\n=\n[\n\"Sunday\"\n,\n\"Monday\"\n,\n\"Tuesday\"\n,\n\"Wednesday\"\n,\n\"Thursday\"\n,\n\"Friday\"\n,\n\"Saturday\"\n]\nprint\n(\n\"Seven Weekdays are:\n\\n\n\"\n)\n# Iterate the list using for loop\nfor\nday\nin\nrange\n(\nlen\n(\nweekdays\n)\n)\n:\nprint\n(\nweekdays\n[\nday\n]\n)\nThe following output will appear after running the script.\nTop\nRun one Python script from another:\nSometimes it is required to use the script of a python file from another python file. It can be done easily, like importing any module by using\nthe import\nkeyword. Here,\nvacations.py\nfile contains two variables initialized by string values. This file is imported in\nc11.py\nfile with the alias name \u2018\nv\u2019\n. A list of month names is defined here. The\nflag\nvariable is used here to print the value of\nvacation1\nvariable for one time for the months \u2018\nJune\u2019\nand \u2018\nJuly\u2019.\nThe value of the\nvacation2\nvariable will print for the month\n\u2018December\u2019\n. The other nine-month names will be printed when the else part of the\nif-elseif-else\nstatement will be executed.\nvacations.py\n# Initialize values\nvacation1\n=\n\"Summer Vacation\"\nvacation2\n=\n\"Winter Vacation\"\nc11.py\n# Import another python script\nimport\nvacations\nas\nv\n# Initialize the month list\nmonths\n=\n[\n\"January\"\n,\n\"February\"\n,\n\"March\"\n,\n\"April\"\n,\n\"May\"\n,\n\"June\"\n,\n\"July\"\n,\n\"August\"\n,\n\"September\"\n,\n\"October\"\n,\n\"November\"\n,\n\"December\"\n]\n# Initial flag variable to print summer vacation one time\nflag\n=\n0\n# Iterate the list using for loop\nfor\nmonth\nin\nmonths:\nif\nmonth\n==\n\"June\"\nor\nmonth\n==\n\"July\"\n:\nif\nflag\n==\n0\n:\nprint\n(\n\"Now\"\n,\nv.\nvacation1\n)\nflag\n=\n1\nelif\nmonth\n==\n\"December\"\n:\nprint\n(\n\"Now\"\n,\nv.\nvacation2\n)\nelse\n:\nprint\n(\n\"The current month is\"\n,\nmonth\n)\nThe following output will appear after running the script.\nTop\nUse of command-line argument:\nThe following script shows the use of command-line arguments in python. Many modules exist in python to parse the command-line arguments\n\u2018sys\u2019\nmodule is imported here to parse the command-line arguments.\nlen()\nmethod is used to count the total arguments, including the script file name. Next, the argument values will be printed.\nc12.py\n# Import sys module\nimport\nsys\n# Total number of arguments\nprint\n(\n'Total arguments:'\n,\nlen\n(\nsys\n.\nargv\n)\n)\nprint\n(\n\"Argument values are:\"\n)\n# Iterate command-line arguments using for loop\nfor\ni\nin\nsys\n.\nargv\n:\nprint\n(\ni\n)\nIf the script is executed without any command-line arguments, then the following output will appear that is showing the script filename.\nThe command-line argument values can be set in spyder editor by opening the\nRun configuration per file\ndialog box by clicking on the\nRun\nmenu. Set the values with space by clicking the Command line options of General settings part of the dialog box.\nIf the script is executed after setting the values shown above, then the following output will appear.\nThe command-line argument values can be passed in the python script easily from the terminal. The following output will appear if the script is executed from the terminal.\nIf you want to know more about command-line arguments in python, then you can check the tutorial,\nHow to parse arguments on command-line in Python\n.\nTop\nUse of regex:\nRegular expression or regex is used in python to match or search and replace any particular portion of a string based on the particular pattern.\n\u2018re\u2019\nmodule is used in python to use a regular expression. The following script shows the use of regex in python. The pattern used in the script will match those string where the first character of the string is a capital letter. A string value will be taken and match the pattern using\nmatch()\nmethod. If the method returns true, then a success message will print otherwise an instructional message will print.\nc13.py\n# Import re module\nimport\nre\n# Take any string data\nstring\n=\ninput\n(\n\"Enter a string value: \"\n)\n# Define the searching pattern\npattern\n=\n'^[A-Z]'\n# match the pattern with input value\nfound\n=\nre\n.\nmatch\n(\npattern\n,\nstring\n)\n# Print message based on the return value\nif\nfound:\nprint\n(\n\"The input value is started with the capital letter\"\n)\nelse\n:\nprint\n(\n\"You have to type string start with the capital letter\"\n)\nThe script is executed two times in the following output.\nmatch()\nfunction returns false for the first execution and returns true for the second execution.\nTop\nUse of getpass:\ngetpass\nis a useful module of python that is used to take password input from the user. The following script shows the use of the getpass module. getpass() method is used here to take the input as password and \u2018\nif\u2019\nstatement is used here to compare the input value with the defined password. \u201c\nyou are authenticated\u201d\nmessage will print if the password matches otherwise it will print \u201c\nYou are not authenticated\n\u201d message.\nc14.py\n# import getpass module\nimport\ngetpass\n# Take password from the user\npasswd\n=\ngetpass\n.\ngetpass\n(\n'Password:'\n)\n# Check the password\nif\npasswd\n==\n\"fahmida\"\n:\nprint\n(\n\"You are authenticated\"\n)\nelse\n:\nprint\n(\n\"You are not authenticated\"\n)\nIf the script runs from the spyder editor, then the input value will be shown because the editor console doesn\u2019t support password mode. So, the following output shows the input password in the following output.\nIf the script executes from the terminal, then input value will not be shown like other Linux password. The script is executed two times from the terminal with an invalid and valid password that is shown in the following output.\nTop\nUse of date format:\nThe date value can be formatted in python in various ways. The following script uses the\ndatetim\ne module to set the current and the custom date value.\ntoday()\nmethod is used here to read the current system date and time. Next, the formatted value of the date is printed by using different property names of the date object. How a custom date value can be assigned and printed is shown in the next part of the script.\nc15.py\nfrom\ndatetime\nimport\ndate\n# Read the current date\ncurrent_date\n=\ndate.\ntoday\n(\n)\n# Print the formatted date\nprint\n(\n\"Today is :%d-%d-%d\"\n%\n(\ncurrent_date.\nday\n,\ncurrent_date.\nmonth\n,\ncurrent_date.\nyear\n)\n)\n# Set the custom date\ncustom_date\n=\ndate\n(\n2020\n,\n12\n,\n16\n)\nprint\n(\n\"The date is:\"\n,\ncustom_date\n)\nThe following output will appear after executing the script.\nTop\nAdd and remove the item from a list:\nlist object is used in python for solving various types of problems. Python has many built-in functions to work with the list object. How a new item can be inserted and removed from a list is shown in the following example. A list of four items is declared in the script.\nInsert()\nmethod is used to insert a new item in the second position of the list.\nremove()\nmethod is used to search and remove the particular item from the list. The list is printed after the insertion and deletion.\nc16.py\n# Declare a fruit list\nfruits\n=\n[\n\"Mango\"\n,\n\"Orange\"\n,\n\"Guava\"\n,\n\"Banana\"\n]\n# Insert an item in the 2nd position\nfruits.\ninsert\n(\n1\n,\n\"Grape\"\n)\n# Displaying list after inserting\nprint\n(\n\"The fruit list after insert:\"\n)\nprint\n(\nfruits\n)\n# Remove an item\nfruits.\nremove\n(\n\"Guava\"\n)\n# Print the list after delete\nprint\n(\n\"The fruit list after delete:\"\n)\nprint\n(\nfruits\n)\nThe following output will appear after executing the script.\nIf you want to know more details about the insertion and deletion of the python script, then you can check the tutorial, \u201c\nHow to add and remove items from a list in Python\n\u201d.\nTop\nList comprehension:\nList comprehension is used in python to create a new list based on any string or tuple or another list. The same task can be done using for loop and lambda function. The following script shows two different uses of list comprehension. A string value is converted into a list of characters using list comprehension. Next, a tuple is converted into a list in the same way.\nc17.py\n# Create a list of characters using list comprehension\nchar_list\n=\n[\nchar\nfor\nchar\nin\n\"linuxhint\"\n]\nprint\n(\nchar_list\n)\n# Define a tuple of websites\nwebsites\n=\n(\n\"google.com\"\n,\n\"yahoo.com\"\n,\n\"ask.com\"\n,\n\"bing.com\"\n)\n# Create a list from tuple using list comprehension\nsite_list\n=\n[\nsite\nfor\nsite\nin\nwebsites\n]\nprint\n(\nsite_list\n)\nTop\nSlice data:\nslice()\nmethod is used in python to cut the particular portion of a string. This method has three parameters. These parameters are\nstart\n,\nstop,\nand\nstep\n. The\nstop\nis the mandatory parameter, and the other two parameters are optional. The following script shows the uses of the\nslice()\nmethod with one, two, and three parameters. When one parameter is used in the\nslice()\nmethod, then it will use the mandatory parameter,\nstop\n. When the two parameters are used in the\nslice()\nmethod, then\nstart\nand\nstop\nparameters are used. When all three parameters are used, then\nstart\n,\nstop\n, and\nstep\nparameters are used.\nc18.py\n# Assign string value\ntext\n=\n\"Learn Python Programming\"\n# Slice using one parameter\nsliceObj\n=\nslice\n(\n5\n)\nprint\n(\ntext\n[\nsliceObj\n]\n)\n# Slice using two parameter\nsliceObj\n=\nslice\n(\n6\n,\n12\n)\nprint\n(\ntext\n[\nsliceObj\n]\n)\n# Slice using three parameter\nsliceObj\n=\nslice\n(\n6\n,\n25\n,\n5\n)\nprint\n(\ntext\n[\nsliceObj\n]\n)\nThe following output will appear after running the script. In the first\nslice()\nmethod, 5 is used as the argument value. It sliced the five characters of\ntext\nvariables that are printed as output. In the second\nslice()\nmethod, 6 and 12 are used as arguments. The slicing is started from position 6 and stopped after 12 characters. In the third\nslice()\nmethod, 6, 25, and 5 are used as arguments. The slicing is started from position 6, and the slicing stopped after 25 characters by omitting 5 characters in each step.\nTop\nAdd and search data in the dictionary:\ndictionary object is used in python to store multiple data like the associative array of other programming languages. The following script shows how a new item can be inserted, and any item can be searched in the dictionary. A dictionary of customer information is declared in the script where the index contains the customer ID, and the value contains the customer name. Next, one new customer information is inserted at the end of the dictionary. A customer ID is taken as input to search in the dictionary.\n\u2018for\u2019\nloop and\n\u2018if\u2019\ncondition is used to iterate the indexes of the dictionary and search the input value in the dictionary.\nc19.py\n# Define a dictionary\ncustomers\n=\n{\n'06753'\n:\n'Mehzabin Afroze'\n,\n'02457'\n:\n'Md. Ali'\n,\n'02834'\n:\n'Mosarof Ahmed'\n,\n'05623'\n:\n'Mila Hasan'\n,\n'07895'\n:\n'Yaqub Ali'\n}\n# Append a new data\ncustomers\n[\n'05634'\n]\n=\n'Mehboba Ferdous'\nprint\n(\n\"The customer names are:\"\n)\n# Print the values of the dictionary\nfor\ncustomer\nin\ncustomers:\nprint\n(\ncustomers\n[\ncustomer\n]\n)\n# Take customer ID as input to search\nname\n=\ninput\n(\n\"Enter customer ID:\"\n)\n# Search the ID in the dictionary\nfor\ncustomer\nin\ncustomers:\nif\ncustomer\n==\nname:\nprint\n(\ncustomers\n[\ncustomer\n]\n)\nbreak\nThe following output will appear after executing the script and taking \u2018\n02457\u2019\nas ID value.\nIf you want to know more about the other useful methods of the dictionary, then you can check the tutorial, \u201c\n10 most useful Python Dictionary Methods\n\u201d.\nTop\nAdd and search data in set:\nThe following script shows the ways to add and search data in a python set. A set of integer data is declared in the script.\nadd()\nmethod is used to insert new data in the set. Next, an integer value will be taken as input to search the value in the set by using\nfor\nloop and\nif\ncondition.\nc20.py\n# Define the number set\nnumbers\n=\n{\n23\n,\n90\n,\n56\n,\n78\n,\n12\n,\n34\n,\n67\n}\n# Add a new data\nnumbers.\nadd\n(\n50\n)\n# Print the set values\nprint\n(\nnumbers\n)\nmessage\n=\n\"Number is not found\"\n# Take a number value for search\nsearch_number\n=\nint\n(\ninput\n(\n\"Enter a number:\"\n)\n)\n# Search the number in the set\nfor\nval\nin\nnumbers:\nif\nval\n==\nsearch_number:\nmessage\n=\n\"Number is found\"\nbreak\nprint\n(\nmessage\n)\nThe script is executed two times with the integer value 89 and 67. 89 does not exist in the set, and \u201c\nNumber is not found\n\u201d is printed. 67 exists in the set, and \u201c\nNumber is found\n\u201d is printed.\nIf you want to know about the\nunion\noperation in the set, then you can check the tutorial, \u201c\nHow to use union on python set\n\u201d.\nTop\nCount items in the list:\ncount()\nmethod is used in python to count how many times a particular string appears in other string. It can take three arguments. The first argument is mandatory, and it searches the particular string in the whole part of another string. The other two arguments of this method are used to limit the search by defining the searching positions. In the following script, the\ncount()\nmethod is used with one argument that will search and count the word \u2018\nPython\n\u2019 in the\nstring\nvariable.\nc21.py\n# Define the string\nstring\n=\n'Python Bash Java Python PHP PERL'\n# Define the search string\nsearch\n=\n'Python'\n# Store the count value\ncount\n=\nstring\n.\ncount\n(\nsearch\n)\n# Print the formatted output\nprint\n(\n\"%s appears %d times\"\n%\n(\nsearch\n,\ncount\n)\n)\nThe following output will appear after executing the script.\nIf you want to know more details about the count() method, then you can check the tutorial,\nHow to use count() method in python\n.\nTop\nDefine and call a function:\nHow user-defined function can be declared and called in python is shown in the following script. Here, two functions are declared.\naddition()\nfunction contains two arguments to calculate the sum of two numbers and print the value.\narea()\nfunction contains one argument to calculate the area of a circle and return the result to the caller by using\nthe return\nstatement.\nc22.py\n# Define addition function\ndef\naddition\n(\nnumber1\n,\nnumber2\n)\n:\nresult\n=\nnumber1 + number2\nprint\n(\n\"Addition result:\"\n,\nresult\n)\n# Define area function with return statement\ndef\narea\n(\nradius\n)\n:\nresult\n=\n3.14\n* radius * radius\nreturn\nresult\n# Call addition function\naddition\n(\n400\n,\n300\n)\n# Call area function\nprint\n(\n\"Area of the circle is\"\n,\narea\n(\n4\n)\n)\nThe following output will appear after executing the script.\nIf you want to know details about the return values from a python function, then you can check the tutorial,\nReturn Multiple Values from A Python Function\n.\nTop\nUse of throw and catch exception:\ntry\nand\ncatch\nblock are used to throw and catch the exception. The following script shows the use of a\ntry-catch\nblock in python. In the\ntry\nblock, a number value will be taken as input and checked the number is even or odd. If any non-numeric value is provided as input, then a\nValueError\nwill be generated, and an exception will be thrown to the\ncatch\nblock to print the error message.\nc23.py\n# Try block\ntry\n:\n# Take a number\nnumber\n=\nint\n(\ninput\n(\n\"Enter a number: \"\n)\n)\nif\nnumber %\n2\n==\n0\n:\nprint\n(\n\"Number is even\"\n)\nelse\n:\nprint\n(\n\"Number is odd\"\n)\n# Exception block\nexcept\n(\nValueError\n)\n:\n# Print error message\nprint\n(\n\"Enter a numeric value\"\n)\nThe following output will appear after executing the script.\nIf you want to know more details about the exception handling in python, then you can check the tutorial, \u201c\nException Handling in Python\n\u201d.\nTop\nRead and Write File:\nThe following script shows the way to read from and write into a file in python. The filename is defined in the variable, filename. The file is opened for writing using the\nopen()\nmethod at the beginning of the script. Three lines are written in the file using the\nwrite()\nmethod. Next, the same file is opened for reading using the\nopen()\nmethod, and each line of the file is read and printed using\nfor\nloop.\nc24.py\n#Assign the filename\nfilename\n=\n\"languages.txt\"\n# Open file for writing\nfileHandler\n=\nopen\n(\nfilename\n,\n\"w\"\n)\n# Add some text\nfileHandler.\nwrite\n(\n\"Bash\n\\n\n\"\n)\nfileHandler.\nwrite\n(\n\"Python\n\\n\n\"\n)\nfileHandler.\nwrite\n(\n\"PHP\n\\n\n\"\n)\n# Close the file\nfileHandler.\nclose\n(\n)\n# Open file for reading\nfileHandler\n=\nopen\n(\nfilename\n,\n\"r\"\n)\n# Read a file line by line\nfor\nline\nin\nfileHandler:\nprint\n(\nline\n)\n# Close the file\nfileHandler.\nclose\n(\n)\nThe following output will appear after executing the script.\nIf you want to know more details about reading and writing files in python, then you can check the tutorial,\nHow to read and write to files in Python\n.\nTop\nList files in a directory:\nThe content of any directory can be read by using the\nos\nmodule of python. The following script shows how to get the list of a specific directory in python using the\nos\nmodule.\nlistdir()\nmethod is used in the script to find out the list of files and folders of a directory.\nfor\nloop is used to print the directory content.\nc25.py\n# Import os module to read directory\nimport\nos\n# Set the directory path\npath\n=\n'/home/fahmida/projects/bin'\n# Read the content of the file\nfiles\n=\nos\n.\nlistdir\n(\npath\n)\n# Print the content of the directory\nfor\nfile\nin\nfiles:\nprint\n(\nfile\n)\nThe content of the directory will appear after executing the script if the defined path of the directory exists.\nTop\nRead and write using pickle:\nThe following script shows the ways to write and read data using\nthe pickle\nmodule of python. In the script, an object is declared and initialized with five numeric values. The data of this object is written into a file using\nthe dump()\nmethod. Next, the\nload()\nmethod is used to read the data from the same file and store it in an object.\nc26.py\n# Import pickle module\nimport\npickle\n# Declare the object to store data\ndataObject\n=\n[\n]\n# Iterate the for loop for 5 times\nfor\nnum\nin\nrange\n(\n10\n,\n15\n)\n:\ndataObject.\nappend\n(\nnum\n)\n# Open a file for writing data\nfile_handler\n=\nopen\n(\n'languages'\n,\n'wb'\n)\n# Dump the data of the object into the file\npickle\n.\ndump\n(\ndataObject\n,\nfile_handler\n)\n# close the file handler\nfile_handler.\nclose\n(\n)\n# Open a file for reading the file\nfile_handler\n=\nopen\n(\n'languages'\n,\n'rb'\n)\n# Load the data from the file after deserialization\ndataObject\n=\npickle\n.\nload\n(\nfile_handler\n)\n# Iterate the loop to print the data\nfor\nval\nin\ndataObject:\nprint\n(\n'The data value : '\n,\nval\n)\n# close the file handler\nfile_handler.\nclose\n(\n)\nThe following output will appear after executing the script.\nIf you want to know more details about reading and writing using pickle, then you can check the tutorial,\nHow to pickle objects in Python\n.\nTop\nDefine class and method:\nThe following script shows how a class and method can be declared and accessed in Python. Here, a class is declared with a class variable and a method. Next, an object of the class is declared to access the class variable and class method.\nc27.py\n# Define the class\nclass\nEmployee:\nname\n=\n\"Mostak Mahmud\"\n# Define the method\ndef\ndetails\n(\nself\n)\n:\nprint\n(\n\"Post: Marketing Officer\"\n)\nprint\n(\n\"Department: Sales\"\n)\nprint\n(\n\"Salary: $1000\"\n)\n# Create the employee object\nemp\n=\nEmployee\n(\n)\n# Print the class variable\nprint\n(\n\"Name:\"\n,\nemp.\nname\n)\n# Call the class method\nemp.\ndetails\n(\n)\nThe following output will appear after executing the script.\nTop\nUse of range function:\nThe following script shows the different uses of range function in python. This function can take three arguments. These are\nstart\n,\nstop\n, and\nstep\n. The\nstop\nargument is mandatory. When one argument is used, then the default value of the start is 0. range() function with one argument, two arguments, and three arguments are used in the three\nfor\nloops here.\nc28.py\n# range() with one parameter\nfor\nval\nin\nrange\n(\n6\n)\n:\nprint\n(\nval\n,\nend\n=\n' \u00a0'\n)\nprint\n(\n'\n\\n\n'\n)\n# range() with two parameter\nfor\nval\nin\nrange\n(\n5\n,\n10\n)\n:\nprint\n(\nval\n,\nend\n=\n' \u00a0'\n)\nprint\n(\n'\n\\n\n'\n)\n# range() with three parameter\nfor\nval\nin\nrange\n(\n0\n,\n8\n,\n2\n)\n:\nprint\n(\nval\n,\nend\n=\n' \u00a0'\n)\nprint\n(\n'\n\\n\n'\n)\nThe following output will appear after executing the script.\nTop\nUse of map function:\nmap()\nfunction is used in python to return a list by using any user-defined function and any iterable object. In the following script,\ncal_power()\nfunction is defined to calculate the\nx\nn\n,\nand the function is used in the first argument of the\nmap()\nfunction. A list named\nnumbers\nis used in the second argument of the\nmap()\nfunction. The value of\nx\nwill be taken from the user, and the\nmap()\nfunction will return a list of power values of\nx,\nbased on the item values of the\nnumbers\nlist.\nc29.py\n# Define the function to calculate power\ndef\ncal_power\n(\nn\n)\n:\nreturn\nx ** n\n# Take the value of x\nx\n=\nint\n(\ninput\n(\n\"Enter the value of x:\"\n)\n)\n# Define a tuple of numbers\nnumbers\n=\n[\n2\n,\n3\n,\n4\n]\n# Calculate the x to the power n using map()\nresult\n=\nmap\n(\ncal_power\n,\nnumbers\n)\nprint\n(\nlist\n(\nresult\n)\n)\nThe following output will appear after executing the script.\nTop\nUse of filter function:\nfilter()\nfunction of python uses a custom function to filter data from an iterable object and create a list with the items for those the function returns true. In the following script,\nSelectedPerson()\nfunction is used in the script to create a list of the filtered data based on the items of\nselectedList\n.\nc30.py\n# Define a list of participant\nparticipant\n=\n[\n'Monalisa'\n,\n'Akbar Hossain'\n,\n'Jakir Hasan'\n,\n'Zahadur Rahman'\n,\n'Zenifer Lopez'\n]\n# Define the function to filters selected candidates\ndef\nSelectedPerson\n(\nparticipant\n)\n:\nselected\n=\n[\n'Akbar Hossain'\n,\n'Zillur Rahman'\n,\n'Monalisa'\n]\nif\n(\nparticipant\nin\nselected\n)\n:\nreturn\nTrue\nselectedList\n=\nfilter\n(\nSelectedPerson\n,\nparticipant\n)\nprint\n(\n'The selected candidates are:'\n)\nfor\ncandidate\nin\nselectedList:\nprint\n(\ncandidate\n)\nThe following output will appear after executing the script.\nTop\nConclusion:\nThe python programming basics are discussed using 30 different topics in this article. I hope the examples of this article will help the readers to learn python easily from the beginning.\nexamples\nAbout the author\nFahmida Yesmin\nI am a trainer of web programming courses. I like to write article or tutorial on various IT topics. I have a YouTube channel where many types of tutorials based on Ubuntu, Windows, Word, Excel, WordPress, Magento, Laravel etc. are published:\nTutorials4u Help\n.\nView all posts\nRELATED LINUX HINT POSTS\nPython Tkinter Examples\nPython Regex Examples\nPython Subprocess.Popen Examples\nPython String Examples\nHow to Concatenate Lists in Python\nHow to Use the Python Timeit to Measure the Time of Code Snippets\nPrint Stacktrace in Python Log\nLinux Hint LLC,\n[email\u00a0protected]\n1210 Kelly Park Circle, Morgan Hill, CA 95037\nPrivacy Policy\nand\nTerms of Use"
  },
  {
    "source": "linuxhint.com",
    "title": "50 sed Command Examples",
    "url": "https://linuxhint.com/50_sed_command_examples/",
    "content": "50 sed Command Examples\nHome\nYouTube\nBASH Programming\n50 sed Command Examples\n6 years ago\nby\nFahmida Yesmin\nsed\nis a useful text processing feature of GNU/Linux. The full form of\nsed\nis Stream Editor.  Many types of simple and complicated text processing tasks can be done very easily by using\nsed\ncommand. Any particular string in a text or a file can be searched, replaced and deleted by using regular expression with\nsed\ncommand. But this commands performs all types of modification temporarily and the original file content is not changed by default. The user can store the modified content into another file if needs. The basic uses of `sed` command are explained in this tutorial by using 50 unique examples. Before starting this tutorial you must check the installed version of `sed` in your operating system by running the following command. The tutorial is designed based on GNU sed. So this version of `sed` will be required to practice the examples shown in this tutorial.\nsed\n--version\nThe following output shows that GNU Sed of version 4.4 is installed in the system.\nSyntax:\nsed\n[\noptions\n]\n\u2026\n[\nscript\n]\n[\nfile\n]\nIf no filename is provided with `sed` command, then the script will work on standard input data. The\nsed\nscript can be executed without any option.\nContent\n:\nBasic text substitution using \u2018sed\u2019\nReplace all instances of a text in a particular line of a file by using \u2018g\u2019 option\nReplace the second occurrence only of a match on each line\nReplace the last occurrence only of a match on each line\nReplace the first match in a file with new text\nReplace the last match in a file with new text\nEscaping backslash in replace commands to manage search and replace of file paths\nReplace all files full path with just the filename no directory\nSubstitute text but only if some other text is found in the string\nSubstitute text but only if some other text is not found in the string\nAdd string before after the matching pattern using \u2018\n\\1\n\u2019\nDelete matching lines\nDelete matching line and 2 lines after matching line\nDelete all spaces at end of the line of text\nDelete all lines that have a match two times on the line\nDelete all lines that have the only whitespace\nDelete all non-printable characters\nIf there is a match in line append something to end of line\nIf there is a match in the line insert line before the match\nIf there is a match in the line insert line after the match\nIf there is not a match append something to the end of line\nIf there is not a match delete the line\nDuplicate matched text after adding a space after the text\nReplace one of a list of strings with the new string from other list\nReplace a matched string with a string that contains newlines\nRemove newlines from file and insert a comma at end of each line\nRemove commas and add newlines to split the text into multiple lines\nFind case insensitive match and delete line\nFind case insensitive match and replace with new text\nFind case insensitive match and replace with all uppercase of the same text\nFind case insensitive match and replace with all lowercase of same text\nReplace all uppercase characters in text with lowercase characters\nSearch for the number in line and append currency symbol after the number\nAdd commas to numbers that have more than 3 digits\nReplace tab characters with 4 space characters\nReplace 4 consecutive space characters with a tab character\nTruncate all lines to first 80 characters\nSearch for a string regex and append some standard text after it\nSearch for a string regex and a second copy of found string after it\nRunning multi-line `sed` scripts from a file\nMatch a multi-line pattern and replace with new multi-line text\nReplace order of two words that match a pattern\nUse multiple sed commands from the command-line\nCombine sed with other commands\nInsert an empty line in a file\nDelete all alpha-numeric characters from each line of a file.\nUse \u2018&\u2019 to match string\nSwitch pair of words\nCapitalize the first character of each word\nPrint line numbers of the file\n1. Basic text substitution using sed\nAny particular part of a text can be searched and replaced by using searching and replacing pattern by using\nsed\ncommand. In the following example, \u2018s\u2019 indicates the search and replace task. The word \u2018Bash\u2019 will be searched in the text, \u2018Bash Scripting Language\u2019 and if the word exists in the text then it will be replaced by the word \u2018Perl\u2019.\necho\n\"Bash Scripting Language\"\n|\nsed\n's/Bash/Perl/'\nIn the output of this execution, the word, \u2018Bash\u2019 exists in the text. So the output is \u2018Perl Scripting Language\u2019.\nsed\ncommand can be used to substitution any part of a file content also. Create a text file named\nweekday.txt\nwith the following content:\n$ cat weekday.txt\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nThe following command will search and replace the text \u2018Sunday\u2019, by the text \u2018Sunday is holiday\u2019.\nsed\n's/Sunday/Sunday is holiday/'\nweekday.txt\nIn the output of this execution, \u2018Sunday\u2019 exists in weekday.txt file and this word is replaced by the text, \u2018Sunday is holiday\u2019 after executing the above\nsed\ncommand.\nGo to top\n2. Replace all instances of a text in a particular line of a file using \u2018g\u2019 option\n\u2018g\u2019 option is used in\nsed\ncommand to replace all occurrences of matching pattern. Create a text file named\npython.txt\nwith the following content to know the use of \u2018g\u2019 option. This file contains the word \u2018Python\u2019 multiple times.\n$ cat python.txt\nPython is a very popular language.\nPython is easy to use. Python is easy to learn.\nPython is a cross-platform language\nThe following command will replace all occurrences of \u2018Python\u2019 in the second line of the file\npython.txt\n. Here, \u2018Python\u2019 occurs two times in the second line.\nsed\n'2 s/Python/perl/g'\npython.txt\nThe following output will appear after running the script. Here, All occurrence of \u2018Python\u2019 in the second line is replaced by \u2018Perl\u2019.\nGo to top\n3. Replace the second occurrence only of a match on each line\nIf any word appears multiple times in a file then the particular occurrence of the word in each line can be replaced by using\nsed\ncommand with the occurrence number. The following\nsed\ncommand will replace the second occurrence of the searching pattern in each line of the file\npython.txt\n.\nsed\n's/Python/perl/g2'\npython.txt\nThe following output will appear after running the above command. Here, the searching text, \u2018Python\u2019 appears two times in the second line only and it is replaced by the text \u2018Perl\u2019:\nGo to top\n4. Replace the last occurrence only of a match on each line\nCreate a text file named \u2018lang.txt\u2019 with the following content.\n$\ncat\nlang.txt\nBash Programming Language.\u00a0 Python Programming Language. Perl Programming Language.\nHypertext Markup Language.\nExtensible Markup Language.\nIn order to replace only the last instance of \u2018Programming\u2019 on a line with \u2018Scripting\u2019, run the sed command as follows:\nsed\n's/\\(.*\\)Programming/\\1Scripting/'\nlang.txt\nTo understand this command, note that the pattern match in this sed command:\n\\(.*\\)Programming\n, will create a capture group with all the text matching the line in a greedy fashion until the last instance of programming.  This capture group is stored as \u2018\\1\u2019 and referenced in the replace part of sed:\n\\1Scripting\n.  Therefore the entire line match up to and until last instance of \u2018Programming\u2019 will be included again in the replacement line with the \u2018Scripting\u2019 word to end the line.  This is the technique to make it work as shown in the output:\nGo to top\n5. Replace the first match in a file with new text\nThe following command will replace only the first match of the searching pattern, \u2018Python\u2019 by the text \u2018perl\u2019. Here,\n\u20181\u2019\nis used to match the first occurrence of the pattern.\nsed\n'1 s/Python/perl/'\npython.txt\nThe following output will appear after running the above commands. Here. the first occurrence of \u2018Python\u2019 in the first line is replaced by \u2018perl\u2019.\nGo to top\n6. Replace the last match in a file with new text\nThe following command will replace the last occurrence of the searching pattern \u2018Python\u2019 by the text \u2018Bash\u2019.  Here,\n\u2018$\u2019\nsymbol is used to match the last occurrence of the pattern.\nsed\n-e\n'$s/Python/Bash/'\npython.txt\nThe following output will appear after running the above commands:\nGo to top\n7. Escaping backslash in replace commands to manage search and replace of file paths\nIt is necessary to escape the backslash in the file path for searching and replacing. The following\u00a0 command of\nsed\nwill add backslash (\\) in the file path.\necho\n/\nhome\n/\nubuntu\n/\ncode\n/\nperl\n/\nadd.pl\n|\nsed\n's;/;\\\\/;g'\nThe file path \u2018/home/ubuntu/code/perl/add.pl\u2019 is provided as input in the\nsed\ncommand and the following output will appear after running the above command:\nGo to top\n8. Replace all files full path with just the filename no directory\nThe filename can be retrieved from the file path very easily by using\nbasename\ncommand.\nsed\ncommand can also be used to retrieve the filename from the file path. The following command will retrieve the filename only from the file path provided by\necho\ncommand.\necho\n\"/home/ubuntu/temp/myfile.txt\"\n|\nsed\n's/.*\\///'\nThe following output will appear after running the above command. Here, the filename, \u2018myfile.txt\u2019 is printed as output.\nGo to top\n9. Substitute text but only if some other text is found in the string\nCreate a file named \u2018dept.txt\u2019 with the following content to replace any text based on other text:\ndept.txt\n$ cat dept.txt\nList of Total Students:\nCSE - Count\nEEE - Count\nCivil - Count\nTwo replace commands are used in the following\nsed\ncommand. Here, the text, \u2018Count\u2019 will be replaced by \u2018100\u2019\u00a0in the line that contains the text \u2018CSE\u2019 and the text \u2018Count\u2019 will be replaced by \u201970\u2019 in the line that contains the searching pattern, \u2018EEE\u2019.\nsed\n-e\n'/CSE/ s/Count/100/; /EEE/ s/Count/70/;'\ndept.txt\nThe following output will appear after the running the above commands:\nGo to top\n10. Substitute text but only if some other text is not found in the string\nThe following\nsed\ncommand will replace the \u2018Count\u2019 value in the line that does not contain the text \u2018CSE\u2019.\ndept.txt\nfile contains two lines that do not contain the text \u2018CSE\u2019. So the \u2018Count\u2019 text will be replaced by 80 in two lines.\nsed\n-i\n-e\n'/CSE/! s/Count/80/;'\ndept.txt\nOutput:\nThe following output will appear after running the above commands:\nGo to top\n11. Add string before and after the matching pattern using \u2018\\1\u2019\nThe sequence of matching patterns of `sed` command is denoted by \u2018\\1\u2019, \u2018\\2\u2019 and so on. The following\nsed\ncommand will search the pattern \u2018Bash\u2019 and if the pattern matches then it will be accessed by \u2018\\1\u2019 in the part of replacing text. Here, the text \u2018Bash\u2019 is searched in the input text and one text is added before and another text is added after \u2018\\1\u2019.\necho\n\"Bash language\"\n|\nsed\n's/\\(Bash\\)/Learn \\1 programming/'\nThe following output will appear after running the above command. Here \u2018Learn\u2019 text is added before \u2018Bash\u2019 and \u2018programming\u2019 text is added after \u2018Bash\u2019.\nGo to top\n12. Delete matching lines\n\u2018d\u2019 option is used in\nsed\ncommand to delete any line from the file. Create a file named \u2018os.txt\u2019 and add the following content to test the function of \u2018d\u2019 option.\n$ cat os.txt\nWindows\nLinux\nAndroid\nOS\nThe following\nsed\ncommand will delete those lines from \u2018os.txt\u2019 file that contains the text \u2018OS\u2019:\nsed\n'/OS/d'\nos.txt\nThe following output will appear after running the above commands:\nGo to top\n13. Delete matching line and 2 lines after matching line\nThe following command will delete three lines from the file\nos.txt\nif the pattern, \u2018\nLinux\u2019\nis found. os.txt contains the text,\n\u2018Linux\n\u2018 in the second line. So, this line and the next two lines will be deleted.\nsed\n'/Linux/,+2d'\nos.txt\nThe following output will appear after running the above command:\nGo to top\n14. Delete all spaces at end of the line of text\nUsing\n[:blank:]\nclass can be used to remove spaces and tabs from the text or the content of any file. The following command will remove the spaces at the end of each line of the file \u2018os.txt\u2019.  Since this example is with empty white space we will first look at the screen shot of the file using Nano with\nAlt-P\nto display white space:\nNow we can run the example sed command below to remove white space from the end of the line of each line.  We will use\n-i\ncommand line to do an in place file edit/update for this example to permanently make the changes:\nsed\n-i\n's/[[:blank:]]*$//'\nos.txt\nNow we can view the file again with nano Alt-p option to see the white space from end of line removed:\nGo to top\n15. Delete all lines that have a match two times on the line\nIn this example we first create a text file named \u2018input.txt\u2019 with the following content.  This example code will delete those lines of the file that contains the searching pattern two times.\n$\ncat\ninput.txt\nPHP is a server-side scripting language.\nPHP is an open-source language and PHP is case-sensitive.\nPHP is platform-independent. PHP is faster.\nTwo\nsed\ncommands are used in this example to remove those lines that contain the pattern \u2018php\u2019 two times. The first\nsed\ncommand will replace the second occurrence of \u2018php\u2019 in each line by \u2018dl\u2019.  Then we pipe the first\nsed\noutput into the second\nsed\ncommand as input. The second\nsed\ncommand will delete those lines that contain the special signal text \u2018dl\u2019.  \u2018dl\u2019 is used in this example as a signal for \u2018delete line\u2019 but the text may have \u2018dl\u2019 in it also, so this is a bit dangerous.  For production system consider using a code like \u2018aNh4JPrSf3EXmdkKDpyz8K5u\u2019 instead of \u2018dl\u2019 to be more random or a more fancy trick you create to avoid accidents.\nsed\n's/php/dl/i2;t'\ninput.txt\n|\nsed\n'/dl/d'\nFor this example output, the file \u2018input.txt\u2019 has two lines that contain the pattern,\n\u2018php\u2019\ntwo times. So, the following output will appear after running the above commands:\nGo to top\n16. Delete all lines that have only white-space\nFor this example we add some empty lines in the content to test this example in the file \u2018input.txt\u2019. Here, \u2018^$\u2019 is used to find out the empty lines in the file \u2018input.txt\u2019.\n$\ncat\ninput.txt\nPHP is a server-side scripting language.\nPHP is an open-source language and PHP is case-sensitive.\nPHP is platform-independent. PHP is faster.\nNow we run the sed command to delete the empty lines:\nsed\n'/^$/d'\ninput.txt\nThe following output will appear after running the above commands:\nGo to top\n17. Delete all non-printable characters\nNon-printable characters can be deleted from any text by replacing non-printable characters by none. [:print:] class is used in this example to find out the non-printable characters. \u2018\\t\u2019 is a non-printable character and it can\u2019t be parsed directly by the\necho\ncommand. For this, \u2018\\t\u2019 character is assigned in a variable,\n$tab\nthat is used in an\necho\ncommand. The output of the\necho\ncommand is sent in the\nsed\ncommand that will remove the character, \u2018\\t\u2019 from the output.\n$\ntab\n=$\n'\\t'\n$\necho\nHello\n\"\n$tab\n\"\nWorld\n$\necho\nHello\n\"\n$tab\n\"\nWorld\n|\nsed\n's/[^[:print:]]//g'\nThe following output will appear after running the above commands. The first\necho\ncommand will print the output with tab space and the\nsed\ncommand will print the output after removing the tab space.\nGo to top\n18. If there is a match in line append something to end of line\nEnsure you have a file \u2018os.txt\u2019 with this content:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nThe following command will append \u201910\u2019 at the end of the line that contains the text \u2018Windows\u2019 in the \u2018os.txt\u2019 file:\nsed\n'/Windows/ s/$/ 10/'\nos.txt\nThe following output will appear after running the command:\nGo to top\n19. If there is a match in the line insert a line before the text\nEnsure you have \u2018input.txt\u2019 for this example:\n$\ncat\ninput.txt\nPHP is a server-side scripting language.\nPHP is an open-source language and PHP is case-sensitive.\nPHP is platform-independent. PHP is faster.\nThe following\nsed\ncommand will search for the text \u2018PHP is platform-independent\u2019 in the \u2018input.txt\u2019 file.  If the file contains this text, \u2018PHP is an interpreted language\u2019 will be inserted before that line.\nsed\n'/PHP is platform-independent/ s/^/PHP is an interpreted language.\\n/'\ninput.txt\nThe following output will appear after running the above commands:\nGo to top\n20. If there is a match in the line insert a line after that line\nThe following\nsed\ncommand will search the text, \u2018Linux\u2019 in the file \u2018os.txt\u2019 and if the text exists in any line then a new text, \u2018Ubuntu\u2019, will be inserted after that line.  First create the \u2018os.txt\u2019 file:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nsed\n's/Linux/&\\nUbuntu/'\nos.txt\nThe following output will appear after running the above commands with the added newline inserted with new text and keeping all the old text from the \u2018&\u2019 special variable which includes the entire match:\nGo to top\n21. If there is not a match append something to the end of line\nThe following\nsed\ncommand will search those lines in \u2018os.txt\u2019 that do not contain the text \u2018Linux\u2019 and append the text, \u2018Operating System\u2019 at the end of those lines. Here, \u2018\n$\n\u2018 symbol is used to identify the end of the line which is where the new text will be substituted in.  Make sure you have a \u2018os.txt\u2019 file:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nAnd then run the command:\nsed\n'/Linux/! s/$/ Operating System/'\nos.txt\nThe following output will appear after running the above commands. Three lines exist in the file os.txt that does not contain the text \u2018Linux\u2019 and the new text is added at the end of these lines.\nGo to top\n22. If there is not a match delete the line\nCreate a file named \u2018web.txt\u2019 and add the following content.\n$\ncat\nweb.txt\nHTML\n5\nJavascript\nCSS\nPHP\nMySQL\nJQuery\nThis sed command will delete lines that do not contain the matching pattern.\nsed\n'/CSS/!d'\nweb.txt\nThe following output will appear after running the above commands. There is one line exists in the file that contains the text, \u2018CSS\u2019. So, the output contains just one line.   If you change the pattern from \u2018CSS\u2019 to \u201cJ\u2019 you will see 2 lines of output.\nsed\n'/J/!d'\nweb.txt\nGo to top\n23. Duplicate matched text after adding a space after the text\nThe following\nsed\ncommand will search for a matching word, \u2018very \u2018 in the file, \u2018python.txt\u2019 and if the word exists then the same word will be inserted again as a duplicate . Here,\n\u2018&\u2019\nsymbol represents the match text and we add it twice for duplication. Ensure you have \u2018python.txt\u2019:\n$\ncat\npython.txt\nPython is a very popular language.\nPython is easy to use. Python is easy to learn.\nPython is a cross-platform language\nHere is the code:\nsed\n-e\n's/very /&&/g'\npython.txt\nThe following output will appear after running the commands. You can see we duplicated the \u2018very \u2018 to make it \u2018very very\u2019:\nGo to top\n24. Replace one list of strings with the new string from other list\nYou have to create two list files for testing this example. Create two text files named \u2018list1.txt\u2019 and \u2018list2\u2019 and add the following content.\n$\ncat\nlist1.txt\n1001\n:Jafar Ali\n1023\n:Nir Hossain\n1067\n:John Michel\n$\ncat\nlist2.txt\n1001\nCSE\u00a0\u00a0\u00a0\u00a0 GPA-\n3.63\n1002\nCSE\u00a0\u00a0\u00a0\u00a0 GPA-\n3.24\n1023\nCSE\u00a0\u00a0\u00a0\u00a0 GPA-\n3.11\n1067\nCSE\u00a0\u00a0\u00a0\u00a0 GPA-\n3.84\nWe will make this process simple from complex by breaking it down into small steps.\nsed\ncan take a list of substitution commands as a file input, so our approach is to first create a file with the list of the relevant sed syntax substitution commands with the \u2018\ns\n\u2018 substitution operator.  Here is the simple code to create the command file using another linux command called\nawk\nwith low complexity.  Note this is a cat of original file, piped into awk and the output redirected to \u2018command.txt\u2019:\ncat\nlist1.txt\n|\nawk\n-F:\n'{printf(\"s/%s/%s/\\n\", $1, $2)}'\n>\ncommand.txt\nWith the \u2018command.txt\u2019 file created we can run this list of substitutions easily on \u2018list2.txt\u2019 with a basic\nsed\ncommand:\nsed\n-f\ncommand.txt list2.txt\nThe output below shows the process in 2 steps to replace the matching keys and values and the otuput:\nGo to top\n25. Replace the matched string with a string that contains newlines\nThe following command will take input from the\necho\ncommand and search the word, \u2018Python\u2019, in the text. If the word exists in the text then a new text, \u2018Added Text\u2019 will be inserted with a newline in the new text. \u00a0Here is the example code:\necho\n\"Bash Perl Python Java PHP ASP\"\n|\nsed\n's/Python/Added Text\\n/'\nBoth the new text and the newline are inserted.  The following output will appear after running the above command:\nGo to top\n26. Remove newlines from file and insert a comma at end of each line\nThe following\nsed\ncommand will replace each newline by a comma in the file \u2018os.txt\u2019.\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nHere,\n\u2018-z\u2019\noption is used to instruct\nsed\nto interpret the input with each line separated NULL character instead of newline, which allows for futher manipulation of the newlines in the text without interference.  We then do a simple substitution of all newlines\n\u2018\\n\u2019\nwith commas:\nsed\n-z\n's/\\n/,/g'\nos.txt\nThe following output will appear after running the above command, note the lack of terminating newline which may or may not be what your use case needs:\nGo to top\n27. Remove commas and add newline to split the text into multiple lines\nThe following\nsed\ncommand will take the comma-separated line from the\necho\ncommand as input and replace all the commas with newlines.\necho\n\"Kaniz Fatema,30th,batch\"\n|\nsed\n\"s/,/\n\\n\n/g\"\nThe following output will appear after running the above command. The input text contains three comma-separated data that are replaced by newline and printed in three lines:\nGo to top\n28. Find case insensitive match and delete line\n\u2018I\u2019\nindicator is used in\nsed\ncommand for the case-insensitive match that indicates ignore case. The following\nsed\ncommand will search for lines that contains the word, \u2018linux\u2019, with case insensitive search, and delete the line from the output.  Setup your \u2018os.txt\u2019 firstly noting the capitalization:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nThen run the\nsed\ncommand:\nsed\n'/linux/Id'\nos.txt\nThe following output will appear after running the above command. \u2018os.txt\u2019 contains the word \u2018Linux\u2019 that matched with the pattern, \u2018linux\u2019 for case-insensitive search and is deleted:\nGo to top\n29. Find case insensitive match and replace with new text\nThe following\nsed\ncommand will take the input from the\necho\ncommand and replace the word, \u2018bash\u2019 by the word, \u2018PHP\u2019 using the case insensitive indicator at the end of the command:\n\u2018i\u2019\n.\necho\n\"I like bash programming \"\n|\nsed\n's/Bash/PHP/i'\nThe following output will appear after running the above command. Here, the word, \u2018Bash\u2019 matched with the word, \u2018bash\u2019 for case-insensitive search and replaced by the word, \u2018PHP\u2019.\nGo to top\n30. Find case insensitive match and replace with all uppercase of the same text\n\u2018\\U\u2019\nis used in\nsed\nto convert any text to all uppercase letter. The following\nsed\ncommand will search the word \u2018linux\u2019 in the \u2018os.txt\u2019 file and if the word exists then it will replace the word with all uppercase letters.  First create the \u2018os.txt\u2019 file.\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nNow here is the command to run:\nsed\n's/\\(linux\\)/\\U\\1/Ig'\nos.txt\nThis command uses\nsed\ncapture groups.\n\\(linux\\)\nis captured in the\n\\1\nfor reuse in the replacement.  In our exmaple\n\u2018\\U\u2019\nis used with\n\u2018\\1\u2019\nto make the captured match convert to uppercase.  Also note\n\u2018Ig\u2019\ncommands at the end of the instruction which enforce case insensitive and global matching. The following output will appear after running the above commands. The word, \u2018Linux\u2019 of \u2018os.txt file\u2019 is replaced by the word, \u2018LINUX\u2019:\nGo to top\n31. Find case insensitive match and replace with all lowercase of same text\nSimilar to the previous example for upper case, we will do a case insensitive search and replace matching text in all lowercase.\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\n\u2018\\L\u2019\nis used in sed to convert any text to all lowercase letters, and again we use capture groups to find the matching text of\n\\(linux\\)\nand store as \u2018\n\\1\n\u2018 to be used for lower casing. Here is the command:\nsed\n's/\\(linux\\)/\\L\\1/Ig'\nos.txt\nThe following output will appear after running the above commands. The word, \u2018Linux\u2019 is replaced by the word, \u2018linux\u2019 here:\nGo to top\n32. Replace all uppercase characters of the text with lowercase characters\nThe following\nsed\ncommand will search all characters in the file \u2018os.txt\u2019 and replace the characters by lowercase letters by using \u2018\\L\u2019.\nBelow is the data file:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nAnd here is the\nsed\ncommand to run:\nsed\n's/\\(.*\\)/\\L\\1/'\nos.txt\nThe following output will appear after running the above commands, note this works because we create a capture group\n\u2018\\1\u2019\nand use the Lower case command on it:\n\u2018\\L\u2019\n.\nGo to top\n33. Search for number in line and append any currency symbol before the\nnumber\nCreate a file named \u2018items.txt\u2019 with the following content:\n$\ncat\nitems.txt\nHDD\n100\nMonitor\n80\nMouse\n10\nThe following\nsed\ncommand will search for the first matching number in each line of \u2018items.txt\u2019 file and append the currency symbol, \u2018$\u2019 before each number.\n$\ncat\nitems.txt\n$\nsed\n's/\\([0-9]\\)/$\\1/'\nitems.txt\nThe following output will appear after running the above commands. Here, \u2018$\u2019 symbol is added before the number of each line. Note we don\u2019t use\n\u2018g\u2019\nfor global we only match the first number, if the example needed to acommodate multiple multi-digit numbers per line something more complex for a solution is needed.\nGo to top\n34. Add commas to numbers that have more than 3 digits\nThe following\nsed\ncommand will take a number as input from\necho\ncommand and add a comma after each group of three digits counting from the right. Here,\n\u2018:a\u2019\nindicates the label and\n\u2018ta\u2019\nis used to iterate conditionally the grouping process on label\n\u2018a\u2019\nwhen the match is true.\necho\n\"5098673\"\n|\nsed\n-e\n:a\n-e\n's/\\(.*[0-9]\\)\\([0-9]\\{3\\}\\)/\\1,\\2/;ta'\nThe number 5098673 is given in the\necho\ncommand. Its a substite command with a conditional label\n\u2018a\u2019\nreferenced with\n\u2018ta\u2019\n.  The search pattern is any digit followed by exactly 3 digits.  The replacement pattern when found is capture group\n\u2018\\1\u2019\nseperated by a\n\u2018,\u2019\nand capture group\n\u2018\\2\u2019\n.  Hence the loop is done through the entire string producing the output:\nGo to top\n35. Replaces tab character with 4 space characters\nThe following sed command will replace each tab character by four space characters.\n\u2018\\t\u2019\nsymbol is used in the\nsed\ncommand to match the tab character and \u2018g\u2019 is used to replace globally all matches.  Here is the code:\necho\n-e\n\"1\n\\t\n2\n\\t\n3\"\n|\nsed\n$\n's/\\t/\u00a0\u00a0\u00a0 /g'\nThe following output will appear after running the above command:\nLet\u2019s see a second example of tab replacement using Nano with Alt-P to show white space as visible before and after.\nFile Before:\nsed command:\nsed\n's/\\t/ \u00a0 \u00a0/g'\ninput.txt\n>\noutput.txt\nFile After Replacement:\nGo to top\n36. Replaces 4 consecutive space characters with tab character\nExactly the reverse of example 35 above, we will show a text file before replacement with consecutive spaces, and then sed to substitute tab charachters using\n\u2018\\t\u2019\nascii code.\nBefore and After file shown below, notice the puncuation marks visible with Nano\u2019s\n\u2018Alt-P\u2019\nto show white space indicators:\nWhitespaces shown by little dots\nTabs indicated by little marks in color\nHere is the command used in this example to replace 4 spaces with tabs:\nsed\n-e\n's/ \u00a0 \u00a0/\\t/g'\ninput.txt\n>\noutput.txt\nGo to top\n37. Truncate all lines to first 80 characters\nCreate a text file named\ninput.txt\nthat contains the lines more than 80 characters to test this example.\nlinuxhint@u20:~$\ncat\ninput.txt\nPHP is a server-side scripting language.\nPHP is an open-source language and PHP is case-sensitive.\nPHP is platform-independent. PHP is faster. I like to talk a lot and hate when i get\ncut\noff :\n)\nsed\n's/\\(^.\\{1,80\\}\\).*/\\1/'\ninput.txt\nThe following output will appear after running the above commands, we cut off the long lines:\nlinuxhint@u20:~$\nsed\n's/\\(^.\\{1,80\\}\\).*/\\1/'\ninput.txt\nPHP is a server-side scripting language.\nPHP is an open-source language and PHP is case-sensitive.\nPHP is platform-independent. PHP is faster. I like to talk a lot and hate when i\nlinuxhint@u20:~$\nGo to top\n38. Search for a string regex and append some standard text after it\nThe following sed command will search the text, \u2018hello\u2019 in the input text and append the text \u2018 John\u2019 after that text.\necho\n\"hello, how are you?\"\n|\nsed\n's/\\(hello\\)/\\1 John/'\nThis code works using a capture group\n\u2018\\(hello\\)\u2019\nreferenced as\n\u2018\\1\u2019\nin the replacement string. The following output will appear after running the above command:\nlinuxhint@u22:~$\necho\n\"hello, how are you?\"\n|\nsed\n's/\\(hello\\)/\\1 John/'\nhello John, how are you?\nlinuxhint@u22:~$\nGo to top\n39. Search for string regex and append some text after the second match in each line\nYou may want to replace a string only on the second (or other number) match on each line.  Let\u2019s create a data file \u2018input.txt\u2019:\nlinuxhint@u22:~$\ncat\ninput.txt\nPHP is a server-side scripting language.\nPHP is an open-source language and PHP is case-sensitive.\nPHP is platform-independent. PHP is faster.\nThe following\nsed\ncommand will search the text for \u2018PHP\u2019 in each line of \u2018input.txt\u2019 and replace the\nsecond match\nonly in each line with the text, \u2018New Text Added\u2019.\nsed\n's/\\(PHP\\)/\\1 (New Text added)/2'\ninput.txt\nThe following output will appear after running the above commands. The searching text, \u2018PHP\u2019 appears two times in the second and third lines of \u2018input.txt\u2019 file. So, the text, \u2018New Text added\u2019 is inserted in the second and third lines after the second match:\nGo to top\n40. Running multi-line sed scripts from a file\nMultiple sed commands can be stored in a file and all the commands can be executed together by running\nsed\ncommand.  To demonstrate this ensure you have \u2018input.txt\u2019:\nlinuxhint@u22:~$\ncat\ninput.txt\nPHP is a server-side scripting language.\nPHP is an open-source language and PHP is case-sensitive.\nPHP is platform-independent. PHP is faster.\nCreate a file named \u2018sedcmd\u2019 and add the following content:\ns\n/\nPHP\n/\nASP\n/\ns\n/\nindependent\n/\ndependent\n/\nAbove, two\nsed\ncommands are added in the file. One command will replace the text \u2018PHP\u2019 by \u2018ASP\u2019 another command will replace the text \u2018independent\u2019 by the text \u2018dependent\u2019. The\n\u2018-f\u2019\noption is used in the\nsed\ncommand to execute all the commands from the file.\nsed\n-f\nsedcmd\u00a0 input.txt\nThe following output will appear after running above commands:\nGo to top\n41. Match a multi-line pattern and replace with new multi-line text\nThe following\nsed\ncommand will search for the multi-line text \u2018Linux\\nAndroid\u2019 and if the pattern matches then the matching lines will be replaced by the new multi-line text \u2018Ubuntu\\nAndroid Lollipop\u2019. \u2018os.txt\u2019 data file is here:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nThe sed command is here:\nsed\n'$!N;s/Linux\\nAndroid/Ubuntu\\nAndoid Lollipop/;P;D'\nos.txt\nHere, P and D are used for multiline processing.  The following output will appear after running the above commands:\nGo to top\n42. Replace order of two words in a text that match a pattern\nThe following\nsed\ncommand will take the input of two words from\necho\ncommand and replace the order of these words.\necho\n\"perl python\"\n|\nsed\n-e\n's/\\([^ ]*\\) *\\([^ ]*\\)/\\2 \\1/'\nThis code uses 2 capture groups to get the first and second word seperated by space and then in the output reverses the order of the capture groups:\n\u2018\\2\u2019 \u2018\\1\u2019\n.  Here is the output:\nlinuxhint@u22:~$\necho\n\"perl python\"\n|\nsed\n-e\n's/\\([^ ]*\\) *\\([^ ]*\\)/\\2 \\1/'\npython\nperl\nlinuxhint@u22:~$\nGo to top\n43. Execute multiple sed commands from the command-line\n\u2018-e\u2019\nwhen combined with multiple\nsed\ncommands separated by semi-colon can be combined together. The following\nsed\ncommand will take a text as input from\necho\ncommand and replaces \u2018Ubuntu\u2019 by \u2018Kubuntu\u2019 and \u2018Centos\u2019 by \u2018Fedor\u2019.\n$\necho\n\"Ubuntu Centos Debian\"\n|\nsed\n-e\n's/Ubuntu/Kubuntu/; s/Centos/Fedora/'\nNote due to the seperating semicolon multiple\n\u2018s/\u2019\ncommands are combined with one sed.  The following output will appear after running the above command and \u2018Ubuntu\u2019 and \u2018Centos\u2019 are replaced by \u2018Kubuntu\u2019 and \u2018Fedora\u2019:\nGo to top\n44. Combine sed with other commands\nThe following command will combine the\nsed\ncommand with\ncat\ncommand. In this example the\ncat\ncommand is used to generate output to stdout.  The first\nsed\ncommand will take input from \u2018os.txt\u2019 file and send the output of the command to second\nsed\ncommand after replacing the text\u2019 \u2018Linux\u2019 by \u2018Fedora\u2019. The second\nsed\ncommand will replace the text \u2018Windows\u2019 by \u2018Windows 10\u2019.  These 3 commands are combined with linux pipes.\nHere is the \u2018OS.txt\u2019 file:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nAnd here is the command to run:\ncat\nos.txt\n|\nsed\n's/Linux/Fedora/'\n|\nsed\n's/windows/Windows 10/i'\nThe following output will appear after running the above command:\nGo to top\n45. Insert empty line in a file\nCreate a file named \u2018stdlist\u2019 with the following content:\n$\ncat\nstdlist\n#ID \u00a0 \u00a0 #Name\n[\n101\n]\n-Ali\n[\n102\n]\n-Neha\nsed\n\u2018s\n\u2018G\u2019\noption is used to insert empty lines in a file after each existing line. You can think of this as converting a single spaced file to a double spaced file with a blank line between each existing line.  Here is the example command:\nsed\nG stdlist\nThe following output will appear after running the above commands. An empty line is inserted after each line of the file:\nlinuxhint@u22:~$\nsed\nG stdlist\n#ID \u00a0 \u00a0 #Name\n[\n101\n]\n-Ali\n[\n102\n]\n-Neha\nlinuxhint@u22:~$\nGo to top\n46. Replace all alpha-numeric characters by space in each line of a file.\nThe following command will replace all alpha-numeric characters by space in the \u2018stdlist\u2019 file whose content is shown here:\n$\ncat\nstdlist\n#ID \u00a0 \u00a0 #Name\n[\n101\n]\n-Ali\n[\n102\n]\n-Neha\nThis\nsed\ncommand works by matching all alphabetical characters in the full range of upper case and lower case as well as integers and uses\nsed\n\u2018s\u2019\nsubstitution command with\n\u2018g\u2019\nglobal modifier:\nsed\n's/[A-Za-z0-9]//g'\nstdlist\nThe following output will appear after running the above commands:\nlinuxhint@u22:~$\nsed\n's/[A-Za-z0-9]//g'\nstdlist\n# \u00a0 \u00a0 #\n[\n]\n-\n[\n]\n-\nlinuxhint@u22:~$\nGo to top\n47. Use \u2018&\u2019 to print matched string\nThe following command will search the word starting with \u2018L\u2019 and replace the text by appending \u2018Matched String is -\u2018 with the matched word by using \u2018&\u2019 symbol. In this example\n\u2018p\u2019\nis used to print the modified text.  The \u2018os.txt\u2019 file is used with this content:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\nHere is the command, note the \u2018^\u2019 used to signify start of line:\nsed\n-n\n's/^L/Matched String is - &/p'\nos.txt\nNote in the output only matched lines are printed when using\n\u2018p\u2019\ncommand:\nGo to top\n48. Switch pair of words in a file\nCreate a text file named \u2018course.txt\u2019 with the following content that contains the pair of words in each line:\n$\ncat\ncourse.txt\nPHP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0ASP\nMySQL \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Oracle\nCodeIgniter \u00a0 \u00a0Laravel\nThe following command will switch the pair of words in each line of the file \u2018course.txt\u2019\nsed\n's/\\([^ ]*\\) *\\([^ ]*\\)/\\2 \\1/'\ncourse.txt\nThe following output will appear after switching the pair of words in each line.  This is a set of 2 capture groups which are reversed in the output of the\n\u2018s\u2019\nsubstitution:\nGo to top\n49. Capitalize the first character of each word\nThe following\nsed\ncommand will take input text from the\necho\ncommand and convert the first character of each word to a capital letter.  The command features 2 capture groups and than capitalizes the first capture group only:\necho\n\"I like bash programming\"\n|\nsed\n's/\\([a-z]\\)\\([a-zA-Z0-9]*\\)/\\u\\1\\2/g'\nThe following output will appear after running the above command. The input text, \u201cI like bash programming\u201d is printed as \u201cI Like Bash Programming\u201d after capitalizing the first word:\nGo to top\n50. Print line numbers of the file\nAssume we want to print line numbers in this sample file shown below:\n$\ncat\nos.txt\nWindows\nLinux\nAndroid\nOS\n\u2018=\u2019 symbol is used in\nsed\ncommand to print the line number before each line of a file. The following command will print the content of \u2018os.txt\u2019 file with line number:\nsed\n'='\nos.txt\nThe following output will appear after running the above command. There are four lines in \u2018os.txt\u2019 file. The line number is printed before each line of the file:\nGo to top\nConclusion\nDifferent uses of the\nsed\ncommand are explained in this tutorial by using very simple examples. The output of all\nsed\nscripts mentioned here are generated temporary and the content of the original file remained unchanged. But if you want you can modify the original file by using \u2013i or \u2013in-place option of\nsed\ncommand. If you are a new Linux user and want to learn the basic uses of\nsed\ncommand to perform various types of string manipulation tasks, then this tutorial will help you.\nFrequently Asked Questions\nWhat is the sed command used for?\nThe sed command has a number of different uses. That being said, the main usage is for substituting words in a file, or finding and replacing. The great thing about sed is that you can search for a word in a file and replace it, but you never even have to open the file \u2013 sed just does it all for you! As well as this, it can be used for deletion. All you need to do is type the word you want to find, replace or delete into sed, and it brings it up for you \u2013 you can then choose to replace that word or delete all traces of the word from your file. sed is a fantastic tool to be able to replace things like IP addresses and anything that is highly sensitive that you would not otherwise want to put in a file. sed is a must-know for any software engineer, system admin or dev ops engineer!\nWhat is s and g in sed command?\nIn its most simple terms, the\n\u2018s\u2019\nfunction that can be used in sed simply means \u2018substitute\u2019. After typing the \u2018s\u2019 you can replace or substitute anything you wish \u2013 just typing\n\u2018s\u2019\nwill only replace the first occurrence of the word on a line. Specifying\n\u2018g\u2019\nmodifier at the end of the sed command will do a global replacement (that is what the G stands for). With this in mind, if you specify\n\u2018g\u2019\nit will replace every occurrence of the word you have chosen rather than just the first occurrence that is the default behavior with\n\u2018s\u2019\n.\nHow do I run a sed script?\nYou can run a sed script in a number of ways but the most common is on the command line. Here you can just specify sed and the file you want to use the command on. This allows you to use sed on that file, allowing you to find, delete and substitute as needed. You can also use it in a shell script, and this way you can pass whatever you want to the script, and it will run the find and replace command for you. This is useful for not wanting to specify highly sensitive data inside a script, so instead, you can pass it in as a variable.\nWhat is a capture group in sed\nCapture groups allow the programmer to create regular expressions to find matching text and then use those matches as assigned variables to do operations on the in the replaced output, like changing the order of the output, modifying with a capitalization command or any other sed modification.  Capture groups allow dynamic text matching a patter to be captured and reused in complex ways.\nexamples\nAbout the author\nFahmida Yesmin\nI am a trainer of web programming courses. I like to write article or tutorial on various IT topics. I have a YouTube channel where many types of tutorials based on Ubuntu, Windows, Word, Excel, WordPress, Magento, Laravel etc. are published:\nTutorials4u Help\n.\nView all posts\nRELATED LINUX HINT POSTS\nBash Cut Examples\nHow to Copy a Directory to Another Directory in Bash on Linux\nHow to Prompt Bash for User Input\nAdvanced Bash File Operations\nHow to Understand and Implement Bash Regular Expressions\nHow to Use Variables Effectively in Bash\nHow to Find Yesterday Date in Bash\nLinux Hint LLC,\n[email\u00a0protected]\n1210 Kelly Park Circle, Morgan Hill, CA 95037\nPrivacy Policy\nand\nTerms of Use"
  },
  {
    "source": "linuxhint.com",
    "title": "30 Bash Script Examples",
    "url": "https://linuxhint.com/30_bash_script_examples/",
    "content": "30 Bash Script Examples\nHome\nYouTube\nBASH Programming\n30 Bash Script Examples\n7 years ago\nby\nFahmida Yesmin\nBash scripts can be used for various purposes, such as executing a shell command, running multiple commands together, customizing administrative tasks, performing task automation etc. So knowledge of bash programming basics is important for every Linux user. This article will help you to get the basic idea on bash programming. Most of the common operations of bash scripting are explained with very simple examples here.\nThe following topics of bash programming are covered in this article.\nHello World\nEcho Command\nComments\nMulti-line comment\nWhile Loop\nFor Loop\nGet User Input\nIf statement\nAnd Condition if statement\nOr Condition if statement\nElse if and else condition\nCase Condition\nGet Arguments from Command Line\nGet arguments from command line with names\nCombine two strings in a variable\nGet Substring of Strings\nAdd 2 numbers into a variable\nCreate a Function\nUse Function Parameters\nPass Return Value from Script\nMake directory\nMake directory by checking existence\nRead a file\nDelete a File\nAppend to file\nTest if File Exists\nSend Email Example\nGet Parse Current Date\nWait Command\nSleep Command\nCreate and Execute First BASH Program:\nYou can run bash script from the terminal or by executing any bash file. Run the following command from the terminal to execute a very simple bash statement. The output of the command will be \u2018\nHello World\n\u2019.\n$\necho\n\"Hello World\"\nOpen any editor to create a bash file. Here,\nnano\neditor is used to create the file and filename is set as \u2018\nFirst.sh\u2019\n$\nnano\nFirst.sh\nAdd the following bash script to the file and save the file.\n#!/bin/bash\necho\n\"Hello World\"\nYou can run bash file by two ways. One way is by using bash command and another is by setting execute permission to bash file and run the file. Both ways are shown here.\n$\nbash\nFirst.sh\nOr,\n$\nchmod\na+x First.sh\n$ .\n/\nFirst.sh\nGo to top\nUse of echo command:\nYou can use echo command with various options. Some useful options are mentioned in the following example. When you use \u2018\necho\n\u2019 command without any option then a newline is added by default.\n\u2018-n\u2019\noption is used to print any text without new line and\n\u2018-e\u2019\noption is used to remove backslash characters from the output. Create a new bash file with a name, \u2018\necho_example.sh\n\u2019 and add the following script.\n#!/bin/bash\necho\n\"Printing text with newline\"\necho\n-n\n\"Printing text without newline\"\necho\n-e\n\"\n\\n\nRemoving\n\\t\nbackslash\n\\t\ncharacters\n\\n\n\"\nRun the file with bash command.\n$\nbash\necho_example.sh\nGo to top\nUse of comment:\n\u2018#\u2019\nsymbol is used to add single line comment in bash script. Create a new file named \u2018\ncomment_example.sh\u2019\nand add the following script with single line comment.\n#!/bin/bash\n# Add two numeric value\n(\n(\nsum\n=\n25\n+\n35\n)\n)\n#Print the result\necho\n$sum\nRun the file with bash command.\n$\nbash\ncomment_example.sh\nGo to top\nUse of Multi-line comment:\nYou can use multi line comment in bash in various ways. A simple way is shown in the following example. Create a new bash named,\n\u2018multiline-comment.sh\u2019\nand add the following script. Here,\n\u2018:\u2019\nand\n\u201c\n\u2019\n\u201d\nsymbols are used to add multiline comment in bash script. This following script will calculate the square of 5.\n#!/bin/bash\n:\n'\nThe following script calculates\nthe square value of the number, 5.\n'\n(\n(\narea\n=\n5\n*\n5\n)\n)\necho\n$area\nRun the file with bash command.\n$\nbash\nmultiline-comment.sh\nYou can check the following link to know more about the use of\nbash comment\n.\nGo to top\nUsing While Loop:\nCreate a bash file with the name,\n\u2018while_example.sh\u2019,\nto know the use of\nwhile\nloop. In the example,\nwhile\nloop will iterate for\n5\ntimes. The value of\ncount\nvariable will increment by\n1\nin each step. When the value of\ncount\nvariable will 5 then the\nwhile\nloop will terminate.\n#!/bin/bash\nvalid\n=\ntrue\ncount\n=\n1\nwhile\n[\n$valid\n]\ndo\necho\n$count\nif\n[\n$count\n-eq\n5\n]\n;\nthen\nbreak\nfi\n(\n(\ncount++\n)\n)\ndone\nRun the file with bash command.\n$\nbash\nwhile_example.sh\nYou can check the following link to know more about the use of\nbash while loop\n.\nGo to top\nUsing For Loop:\nThe basic\nfor\nloop declaration is shown in the following example. Create a file named \u2018\nfor_example.sh\n\u2019 and add the following script using\nfor\nloop. Here,\nfor\nloop will iterate for\n10\ntimes and print all values of the variable,\ncounter\nin single line.\n#!/bin/bash\nfor\n(\n(\ncounter\n=\n10\n; counter\n>\n0\n; counter--\n)\n)\ndo\necho\n-n\n\"\n$counter\n\"\ndone\nprintf\n\"\n\\n\n\"\nRun the file with bash command.\n$\nbash\nfor_example.sh\nYou can use for loop for different purposes and ways in your bash script. You can check the following link to know more about the use of\nbash for loop\n.\nGo to top\nGet User Input:\n\u2018\nread\n\u2019 command is used to take input from user in bash. Create a file named \u2018\nuser_input.sh\n\u2019 and add the following script for taking input from the user. Here, one string value will be taken from the user and display the value by combining other string value.\n#!/bin/bash\necho\n\"Enter Your Name\"\nread\nname\necho\n\"Welcome\n$name\nto LinuxHint\"\nRun the file with bash command.\n$\nbash\nuser_input.sh\nYou can check the following link to know more about the use of\nbash user input\n.\nGo to top\nUsing if statement:\nYou can use if condition with single or multiple conditions. Starting and ending block of this statement is define by\n\u2018if\u2019\nand\n\u2018fi\u2019\n. Create a file named \u2018\nsimple_if.sh\n\u2019 with the following script to know the use\nif\nstatement in bash. Here,\n10\nis assigned to the variable,\nn\n. if the value of\n$n\nis less than 10 then the output will be \u201c\nIt is a one digit number\n\u201d, otherwise the output will be \u201c\nIt is a two digit number\n\u201d. For comparison,\n\u2018-lt\u2019\nis used here. For comparison, you can also use\n\u2018-eq\u2019\nfor\nequality\n,\n\u2018-ne\u2019\nfor\nnot equality\nand\n\u2018-gt\u2019\nfor\ngreater than\nin bash script.\n#!/bin/bash\nn\n=\n10\nif\n[\n$n\n-lt\n10\n]\n;\nthen\necho\n\"It is a one digit number\"\nelse\necho\n\"It is a two digit number\"\nfi\nRun the file with bash command.\n$\nbash\nsimple_if.sh\nGo to top\nUsing if statement with AND logic:\nDifferent types of logical conditions can be used in if statement with two or more conditions. How you can define multiple conditions in if statement using\nAND\nlogic is shown in the following example.\n\u2018&&\u2019\nis used to apply\nAND\nlogic of\nif\nstatement. Create a file named\n\u2018if_with_AND.sh\u2019\nto check the following code. Here, the value of\nusername\nand\npassword\nvariables will be taken from the user and compared with \u2018\nadmin\n\u2019 and \u2018\nsecret\n\u2019. If both values match then the output will be \u201c\nvalid user\n\u201d, otherwise the output will be \u201c\ninvalid user\n\u201d.\n#!/bin/bash\necho\n\"Enter username\"\nread\nusername\necho\n\"Enter password\"\nread\npassword\nif\n[\n[\n(\n$username\n==\n\"admin\"\n&&\n$password\n==\n\"secret\"\n)\n]\n]\n;\nthen\necho\n\"valid user\"\nelse\necho\n\"invalid user\"\nfi\nRun the file with bash command.\n$\nbash\nif_with_AND.sh\nGo to top\nUsing if statement with OR logic:\n\u2018\n||\n\u2019 is used to define\nOR\nlogic in\nif\ncondition. Create a file named\n\u2018if_with_OR.sh\u2019\nwith the following code to check the use of\nOR\nlogic of\nif\nstatement. Here, the value of\nn\nwill be taken from the user. If the value is equal to\n15\nor\n45\nthen the output will be \u201c\nYou won the game\n\u201d, otherwise the output will be \u201c\nYou lost the game\n\u201d.\n#!/bin/bash\necho\n\"Enter any number\"\nread\nn\nif\n[\n[\n(\n$n\n-eq\n15\n||\n$n\n-eq\n45\n)\n]\n]\nthen\necho\n\"You won the game\"\nelse\necho\n\"You lost the game\"\nfi\nRun the file with bash command.\n$\nbash\nif_with_OR.sh\nGo to top\nUsing else if statement:\nThe use of\nelse if\ncondition is little different in bash than other programming language. \u2018\nelif\n\u2019 is used to define\nelse if\ncondition in bash. Create a file named, \u2018\nelseif_example.sh\n\u2019 and add the following script to check how\nelse if\nis defined in bash script.\n#!/bin/bash\necho\n\"Enter your lucky number\"\nread\nn\nif\n[\n$n\n-eq\n101\n]\n;\nthen\necho\n\"You got 1st prize\"\nelif\n[\n$n\n-eq\n510\n]\n;\nthen\necho\n\"You got 2nd prize\"\nelif\n[\n$n\n-eq\n999\n]\n;\nthen\necho\n\"You got 3rd prize\"\nelse\necho\n\"Sorry, try for the next time\"\nfi\nRun the file with bash command.\n$\nbash\nelseif_example.sh\nGo to top\nUsing Case Statement:\nCase\nstatement is used as the alternative of\nif-elseif-else\nstatement. The starting and ending block of this statement is defined by \u2018\ncase\n\u2019 and \u2018\nesac\n\u2019. Create a new file named, \u2018\ncase_example.sh\n\u2019 and add the following script. The output of the following script will be same to the previous\nelse if\nexample.\n#!/bin/bash\necho\n\"Enter your lucky number\"\nread\nn\ncase\n$n\nin\n101\n)\necho\necho\n\"You got 1st prize\"\n;;\n510\n)\necho\n\"You got 2nd prize\"\n;;\n999\n)\necho\n\"You got 3rd prize\"\n;;\n*\n)\necho\n\"Sorry, try for the next time\"\n;;\nesac\nRun the file with bash command.\n$\nbash\ncase_example.sh\nGo to top\nGet Arguments from Command Line:\nBash script can read input from command line argument like other programming language. For example,\n$1\nand\n$2\nvariable are used to read first and second command line arguments. Create a file named \u201c\ncommand_line.sh\n\u201d and add the following script. Two argument values read by the following script and prints the total number of arguments and the argument values as output.\n#!/bin/bash\necho\n\"Total arguments : $#\"\necho\n\"1st Argument = $1\"\necho\n\"2nd argument = $2\"\nRun the file with bash command.\n$\nbash\ncommand_line.sh Linux Hint\nYou can check the following link to know more about the use of\nbash command line argument\n.\nGo to top\nGet arguments from command line with names:\nHow you can read command line arguments with names is shown in the following script. Create a file named, \u2018\ncommand_line_names.sh\u2019\nand add the following code. Here, two arguments,\nX\nand\nY\nare read by this script and print the sum of X and Y.\n#!/bin/bash\nfor\narg\nin\n\"$@\"\ndo\nindex\n=$\n(\necho\n$arg\n|\ncut\n-f1\n-d\n=\n)\nval\n=$\n(\necho\n$arg\n|\ncut\n-f2\n-d\n=\n)\ncase\n$index\nin\nX\n)\nx\n=\n$val\n;;\nY\n)\ny\n=\n$val\n;;\n*\n)\nesac\ndone\n(\n(\nresult\n=x+y\n)\n)\necho\n\"X+Y=\n$result\n\"\nRun the file with bash command and with two command line arguments.\n$\nbash\ncommand_line_names\nX\n=\n45\nY\n=\n30\nGo to top\nCombine String variables:\nYou can easily combine string variables in bash. Create a file named \u201c\nstring_combine.sh\n\u201d and add the following script to check how you can combine string variables in bash by placing variables together or using\n\u2018+\u2019\noperator.\n#!/bin/bash\nstring1\n=\n\"Linux\"\nstring2\n=\n\"Hint\"\necho\n\"\n$string1\n$string2\n\"\nstring3\n=\n$string1\n+\n$string2\nstring3+=\n\" is a good tutorial blog site\"\necho\n$string3\nRun the file with bash command.\n$\nbash\nstring_combine.sh\nGo to top\nGet substring of String:\nLike other programming language, bash has no built-in function to cut value from any string data. But you can do the task of substring in another way in bash that is shown in the following script. To test the script, create a file named \u2018\nsubstring_example.sh\n\u2019 with the following code. Here, the value,\n6\nindicates the starting point from where the substring will start and\n5\nindicates the length of the substring.\n#!/bin/bash\nStr\n=\n\"Learn Linux from LinuxHint\"\nsubStr\n=\n${Str:6:5}\necho\n$subStr\nRun the file with bash command.\n$\nbash\nsubstring_example.sh\nGo to top\nAdd Two Numbers:\nYou can do the arithmetical operations in bash in different ways. How you can add two integer numbers in bash using double brackets is shown in the following script. Create a file named \u2018\nadd_numbers.sh\n\u2019 with the following code. Two integer values will be taken from the user and printed the result of addition.\n#!/bin/bash\necho\n\"Enter first number\"\nread\nx\necho\n\"Enter second number\"\nread\ny\n(\n(\nsum\n=x+y\n)\n)\necho\n\"The result of addition=\n$sum\n\"\nRun the file with bash command.\n$\nbash\nadd_numbers.sh\nYou can check the following link to know more about\nbash arithmetic\n.\nGo to top\nCreate Function:\nHow you can create a simple function and call the function is shown in the following script. Create a file named \u2018\nfunction_example.sh\n\u2019 and add the following code. You can call any function by name only without using any bracket in bash script.\n#!/bin/bash\nfunction\nF1\n(\n)\n{\necho\n'I like bash programming'\n}\nF1\nRun the file with bash command.\n$\nbash\nfunction_example.sh\nGo to top\nCreate function with Parameters:\nBash can\u2019t declare function parameter or arguments at the time of function declaration. But you can use parameters in function by using other variable. If two values are passed at the time of function calling then $1 and $2 variable are used for reading the values. Create a file named \u2018\nfunction|_parameter.sh\n\u2019 and add the following code. Here, the function, \u2018\nRectangle_Area\u2019\nwill calculate the area of a rectangle based on the parameter values.\n#!/bin/bash\nRectangle_Area\n(\n)\n{\narea\n=$\n(\n(\n$1\n*\n$2\n)\n)\necho\n\"Area is :\n$area\n\"\n}\nRectangle_Area\n10\n20\nRun the file with bash command.\n$\nbash\nfunction_parameter.sh\nGo to top\nPass Return Value from Function:\nBash function can pass both numeric and string values. How you can pass a string value from the function is shown in the following example. Create a file named, \u2018\nfunction_return.sh\n\u2019 and add the following code. The function,\ngreeting()\nreturns a string value into the variable,\nval\nwhich prints later by combining with other string.\n#!/bin/bash\nfunction\ngreeting\n(\n)\n{\nstr\n=\n\"Hello,\n$name\n\"\necho\n$str\n}\necho\n\"Enter your name\"\nread\nname\nval\n=$\n(\ngreeting\n)\necho\n\"Return value of the function is\n$val\n\"\nRun the file with bash command.\n$\nbash\nfunction_return.sh\nYou can check the following link to know more about the use of\nbash functions\n.\nGo to top\nMake Directory:\nBash uses \u2018\nmkdir\n\u2019 command to create a new directory. Create a file named \u2018\nmake_directory.sh\n\u2019 and add the following code to take a new directory name from the user. If the directory name is not exist in the current location then it will create the directory, otherwise the program will display error.\n#!/bin/bash\necho\n\"Enter directory name\"\nread\nnewdir\n`\nmkdir\n$newdir\n`\nRun the file with bash command.\n$\nbash\nmake_directory.sh\nGo to top\nMake directory by checking existence:\nIf you want to check the existence of directory in the current location before executing the \u2018\nmkdir\n\u2019 command then you can use the following code.\n\u2018-d\n\u2019 option is used to test a particular directory is exist or not. Create a file named, \u2018\ndirectory_exist.sh\u2019\nand add the following code to create a directory by checking existence.\n#!/bin/bash\necho\n\"Enter directory name\"\nread\nndir\nif\n[\n-d\n\"\n$ndir\n\"\n]\nthen\necho\n\"Directory exist\"\nelse\n`\nmkdir\n$ndir\n`\necho\n\"Directory created\"\nfi\nRun the file with bash command.\n$\nbash\ndirectory_exist.sh\nYou can check the following link to know more about\nbash directory creation\n.\nGo to top\nRead a File:\nYou can read any file line by line in bash by using loop. Create a file named, \u2018\nread_file.sh\n\u2019 and add the following code to read an existing file named, \u2018\nbook.txt\n\u2019.\n#!/bin/bash\nfile\n=\n'book.txt'\nwhile\nread\nline;\ndo\necho\n$line\ndone\n<\n$file\nRun the file with bash command.\n$\nbash\nread_file.sh\nRun the following command to check the original content of \u2018\nbook.txt\n\u2019 file.\n$\ncat\nbook.txt\nYou can check the following link to know the different ways to\nread file in bash\n.\nGo to top\nDelete a File:\n\u2018\nrm\n\u2019 command is used in bash to remove any file. Create a file named \u2018\ndelete_file.sh\n\u2019 with the following code to take the filename from the user and remove. Here,\n\u2018-i\u2019\noption is used to get permission from the user before removing the file.\n#!/bin/bash\necho\n\"Enter filename to remove\"\nread\nfn\nrm\n-i\n$fn\nRun the file with bash command.\n$\nls\n$\nbash\ndelete_file.sh\n$\nls\nGo to top\nAppend to File:\nNew data can be added into any existing file by using\n\u2018>>\u2019\noperator in bash. Create a file named\n\u2018append_file.sh\n\u2019 and add the following code to add new content at the end of the file. Here, \u2018\nLearning Laravel 5\n\u2019 will be added at the of \u2018\nbook.txt\u2019\nfile after executing the script.\n#!/bin/bash\necho\n\"Before appending the file\"\ncat\nbook.txt\necho\n\"Learning Laravel 5\"\n>>\nbook.txt\necho\n\"After appending the file\"\ncat\nbook.txt\nRun the file with bash command.\n$\nbash\nappend_file.sh\nGo to top\nTest if File Exist:\nYou can check the existence of file in bash by using\n\u2018-e\u2019\nor\n\u2018-f\u2019\noption.\n\u2018-f\u2019\noption is used in the following script to test the file existence. Create a file named, \u2018\nfile_exist.sh\n\u2019 and add the following code. Here, the filename will pass from the command line.\n#!/bin/bash\nfilename\n=\n$1\nif\n[\n-f\n\"\n$filename\n\"\n]\n;\nthen\necho\n\"File exists\"\nelse\necho\n\"File does not exist\"\nfi\nRun the following commands to check the existence of the file. Here,\nbook.txt\nfile exists and\nbook2.txt\nis not exist in the current location.\n$\nls\n$\nbash\nfile_exist.sh book.txt\n$\nbash\nfile_exist.sh book2.txt\nGo to top\nSend Email:\nYou can send email by using \u2018\nmail\n\u2019 or \u2018\nsendmail\n\u2019 command. Before using these commands, you have to install all necessary packages. Create a file named, \u2018\nmail_example.sh\n\u2019 and add the following code to send the email.\n#!/bin/bash\nRecipient\n=\u201dadmin\n@\nexample.com\u201d\nSubject\n=\u201dGreeting\u201d\nMessage\n=\u201dWelcome to our site\u201d\n`\nmail\n-s\n$Subject\n$Recipient\n<<<\n$Message\n`\nRun the file with bash command.\n$\nbash\nmail_example.sh\nGo to top\nGet Parse Current Date:\nYou can get the current system date and time value using `\ndate\n` command. Every part of date and time value can be parsed using \u2018\nY\u2019, \u2018m\u2019, \u2018d\u2019, \u2018H\u2019, \u2018M\u2019\nand \u2018\nS\u2019\n. Create a new file named \u2018\ndate_parse.sh\u2019\nand add the following code to separate day, month, year, hour, minute and second values.\n#!/bin/bash\nYear\n=\n`\ndate\n+\n%\nY\n`\nMonth\n=\n`\ndate\n+\n%\nm\n`\nDay\n=\n`\ndate\n+\n%\nd\n`\nHour\n=\n`\ndate\n+\n%\nH\n`\nMinute\n=\n`\ndate\n+\n%\nM\n`\nSecond\n=\n`\ndate\n+\n%\nS\n`\necho\n`\ndate\n`\necho\n\"Current Date is:\n$Day\n-\n$Month\n-\n$Year\n\"\necho\n\"Current Time is:\n$Hour\n:\n$Minute\n:\n$Second\n\"\nRun the file with bash command.\n$\nbash\ndate_parse.sh\nGo to top\nWait Command:\nwait\nis a built-in command of Linux that waits for completing any running process.\nwait\ncommand is used with a particular process id or job id.\u00a0If no process id or job id is given with wait command then it will wait for all current child processes to complete and returns exit status. Create a file named \u2018\nwait_example.sh\u2019\nand add the following script.\n#!/bin/bash\necho\n\"Wait command\"\n&\nprocess_id\n=\n$!\nwait\n$process_id\necho\n\"Exited with status $?\"\nRun the file with bash command.\n$\nbash\nwait_example.sh\nYou can check the following link to know more about\nbash linux wait command\n.\nGo to top\nSleep Command:\nWhen you want to pause the execution of any command for specific period of time then you can use\nsleep\ncommand. You can set the delay amount by\nseconds (s), minutes (m), hours (h) and days (d).\nCreate a file named\n\u2018sleep_example.sh\u2019\nand add the following script. This script will wait for 5 seconds after running.\n#!/bin/bash\necho\n\"Wait for 5 seconds\"\nsleep\n5\necho\n\"Completed\"\nRun the file with bash command.\n$\nbash\nsleep_example.sh\nYou can check the following link to know more about\nbash linux sleep command\n.\nGo to top\nHope, after reading this article you have got a basic concept on bash scripting language and you will be able to apply them based on your requirements.\nexamples\nAbout the author\nFahmida Yesmin\nI am a trainer of web programming courses. I like to write article or tutorial on various IT topics. I have a YouTube channel where many types of tutorials based on Ubuntu, Windows, Word, Excel, WordPress, Magento, Laravel etc. are published:\nTutorials4u Help\n.\nView all posts\nRELATED LINUX HINT POSTS\nBash Cut Examples\nHow to Copy a Directory to Another Directory in Bash on Linux\nHow to Prompt Bash for User Input\nAdvanced Bash File Operations\nHow to Understand and Implement Bash Regular Expressions\nHow to Use Variables Effectively in Bash\nHow to Find Yesterday Date in Bash\nLinux Hint LLC,\n[email\u00a0protected]\n1210 Kelly Park Circle, Morgan Hill, CA 95037\nPrivacy Policy\nand\nTerms of Use"
  },
  {
    "source": "linuxhint.com",
    "title": "Best Linux Distro in 2025",
    "url": "https://linuxhint.com/best-linux-distro-in-2025/",
    "content": "Best Linux Distro in 2025\nHome\nYouTube\nBest of Linux\nBest Linux Distro in 2025\n2 months ago\nby\nLinux Wolfman\nLinux is a free and open source technology, but you will need to choose a Linux distribution to actually use it as a working solution.  Therefore in this blog post we will review the best Linux distributions you can choose in 2025 so you can select what you need based on the latest information.\nBest Linux for the Enterprise: Red Hat Enterprise Linux\nRed Hat Enterprise Linux (RHEL) is the best Linux distribution for enterprises due to its focus on stability, security, and long-term support. It offers a 10-year lifecycle with regular updates, ensuring reliability for mission-critical applications. RHEL\u2019s advanced security features, like SELinux, and compliance with industry standards make it ideal for industries such as finance and government. Its extensive ecosystem, integration with cloud platforms, and robust support from Red Hat\u2019s expert team further enhance its suitability for large-scale, hybrid environments.  RHEL is also best because of industry standardization in that it is commonly used in the enterprise setting so many employees are comfortable using it in this context.\nBest Linux for the Developers and Programmers: Debian\nDebian Linux is highly regarded for developers and programmers due to its vast software repository, offering over 59,000 packages, including the latest tools and libraries for coding. Its stability and reliability make it a dependable choice for development environments, while its flexibility allows customization for specific needs. Debian\u2019s strong community support, commitment to open-source principles, and compatibility with multiple architectures further enhance its appeal for creating, testing, and deploying software efficiently.  Debian is also known for their free software attitude ensuring that the OS is completely intellectual property free which helps developers to make sure what they are building is portable and without any hooks or gotchyas.\nBest Alternative to Red Hat Enterprise Linux: Rocky Linux\nRocky Linux is the best alternative to Red Hat Enterprise Linux (RHEL) because it was designed as a 1:1 binary-compatible replacement after CentOS shifted to a rolling-release model. It provides enterprise-grade stability, long-term support, and a focus on security, mirroring RHEL\u2019s strengths. As a community-driven project, Rocky Linux is free, ensuring cost-effectiveness without sacrificing reliability. Its active development and commitment to staying aligned with RHEL updates make it ideal for enterprises seeking a no-compromise, open-source solution.\nBest Linux for Laptops and Home Computers: Ubuntu\nUbuntu is the best Linux distro for laptops and home computers due to its user-friendly interface, making it accessible for beginners and efficient for experienced users. It offers excellent hardware compatibility, ensuring seamless performance on a wide range of devices. Ubuntu\u2019s regular updates, extensive software repository, and strong community support provide a reliable and customizable experience. Additionally, its focus on power management and pre-installed drivers optimizes it for laptop use, while its polished desktop environment enhances home computing.\nBest Linux for Gaming: Pop!_OS\nPop!_OS is the best Linux distro for gaming due to its seamless integration of gaming tools, excellent GPU support, and user-friendly design. Built on Ubuntu, it offers out-of-the-box compatibility with NVIDIA and AMD graphics cards, including easy driver switching for optimal performance. Pop!_OS includes Steam pre-installed and supports Proton, ensuring smooth gameplay for both native Linux and Windows games. Its intuitive interface, customizable desktop environment, and focus on performance tweaks make it ideal for gamers who want a reliable, hassle-free experience without sacrificing versatility.\nBest Linux for Privacy: PureOS\nPureOS is the best Linux distro for privacy due to its unwavering commitment to user freedom and security. Developed by Purism, it is based on Debian and uses only free, open-source software, eliminating proprietary components that could compromise privacy. PureOS integrates privacy-focused tools like the Tor Browser and encryption utilities by default, ensuring anonymous browsing and secure data handling. Its design prioritizes user control, allowing for customizable privacy settings, while regular updates maintain robust protection. Additionally, its seamless integration with Purism\u2019s privacy-focused hardware enhances its effectiveness, making it ideal for privacy-conscious users seeking a stable and trustworthy operating system.\nBest Linux for building Embedded Systems or into Products: Alpine Linux\nAlpine Linux is the best Linux distribution for building embedded systems or integrating into products due to its unmatched combination of lightweight design, security, and flexibility. Its minimal footprint, achieved through musl libc and busybox, ensures efficient use of limited resources, making it ideal for devices like IoT gadgets, wearables, and edge hardware. Alpine prioritizes security with features like position-independent executables, a hardened kernel, and a focus on simplicity, reducing attack surfaces. The apk package manager enables fast, reliable updates, while its ability to run entirely in RAM ensures quick boot times and resilience. Additionally, Alpine\u2019s modular architecture and active community support make it highly customizable, allowing developers to tailor it precisely to their product\u2019s needs.\nOther Notable Linux Distributions\nOther notable distributions that did not win or category awards above include: Linux Mint, Arch Linux, Manjaro, Fedora, OpenSuse, and Alma Linux.  We will briefly describe them and their benefits.\nLinux Mint\n: Known for its user-friendly interface and out-of-the-box multimedia support, Linux Mint is good at providing a stable, polished experience for beginners and those transitioning from Windows or macOS. Its Cinnamon desktop environment is intuitive, and it excels in home computing and general productivity.  Linux Mint is based on Ubuntu, it builds upon Ubuntu\u2019s stable foundation, using its repositories and package management system, while adding its own customizations to enhance the experience for beginners and general users.\nArch Linux\n: Known for its minimalist, do-it-yourself approach, Arch Linux is good at offering total control and customization for advanced users. It uses a rolling-release model, ensuring access to the latest software, and is ideal for those who want to build a system tailored to their exact needs. Arch Linux is an original, independent Linux distribution, not derived from any other system. It uses its own unique package format (.pkg.tar.zst) and is built from the ground up with a focus on simplicity, minimalism, and user control. Arch has a large, active community that operates independently from major distributions like RHEL, Debian, and SUSE, and it maintains its own repositories and development ecosystem, emphasizing a rolling-release model and the Arch User Repository (AUR) for community-driven software.\nManjaro\n: Known for its Arch-based foundation with added user-friendliness, Manjaro is good at balancing cutting-edge software with ease of use. It provides pre-configured desktops, automatic hardware detection, and a curated repository, making it suitable for users who want Arch\u2019s power without the complexity.\nFedora\n: Known for its innovation and use of bleeding-edge technology, Fedora is good at showcasing the latest open-source advancements while maintaining stability. Backed by Red Hat, it excels in development, testing new features, and serving as a reliable platform for professionals and enthusiasts.\nopenSUSE\n: Known for its versatility and powerful configuration tools like YaST, openSUSE is good at catering to both beginners and experts. It offers two models\u2014Tumbleweed (rolling release) and Leap (stable)\u2014making it ideal for diverse use cases, from servers to desktops.\nAlmaLinux\n: Known as a free, community-driven alternative to Red Hat Enterprise Linux (RHEL), AlmaLinux is good at providing enterprise-grade stability and long-term support. It ensures 1:1 binary compatibility with RHEL, making it perfect for businesses seeking a cost-effective, reliable server OS.\nConclusion\nBy reviewing the criteria above you should be able to pick the best Linux distribution for you in 2025!\nAbout the author\nLinux Wolfman\nLinux Wolfman is interested in Operating Systems, File Systems, Databases and Analytics and always watching for new technologies and trends.  Reach me by tweeting to\n@linuxhint\nand ask for the Wolfman.\nView all posts\nRELATED LINUX HINT POSTS\nBest Linux Distro in 2025\nBest Arch Linux Based Distros of 2024\nBest Linux Desktop Environment In 2024\n4 Best Open-Source Video Editors\nThe Linux DAW Showdown: Unveiling the Best Music Production Tools for Open-Source Enthusiasts\nTop 7 Lightweight Linux Distributions\n5 Best Linux Phones\nLinux Hint LLC,\n[email\u00a0protected]\n1210 Kelly Park Circle, Morgan Hill, CA 95037\nPrivacy Policy\nand\nTerms of Use"
  },
  {
    "source": "linuxhint.com",
    "title": "How to Change Your Prompt in Bash Shell in Ubuntu",
    "url": "https://linuxhint.com/how-to-change-your-prompt-in-bash-shell-in-ubuntu/",
    "content": "How to Change Your Prompt in Bash Shell in Ubuntu\nHome\nYouTube\nUbuntu\nHow to Change Your Prompt in Bash Shell in Ubuntu\n3 months ago\nby\nLinux Wolfman\nI don\u2019t like my prompt, i want to change it. it has my username and host, but the formatting is not what i want.  This blog will get you started quickly on doing exactly that.\nThis is my current prompt below:\nTo change the prompt you will update\n.bashrc\nand set the\nPS1\nenvironment variable to a new value.\nHere is a cheatsheet of the prompt options:\nYou can use these placeholders for customization:\n\\u \u2013 Username\n\\h \u2013 Hostname\n\\w \u2013 Current working directory\n\\W \u2013 Basename of the current working directory\n\\$ \u2013 Shows $ for a normal user and # for the root user\n\\t \u2013 Current time (HH:MM:SS)\n\\d \u2013 Date (e.g., \"Mon Jan 05\")\n\\! \u2013 History number of the command\n\\# \u2013 Command number\nI want to change my prompt to say\nHere is my new prompt I am going to use:\nexport PS1=\"linuxhint@mybox \\w: \"\nCan you guess what that does?  Yes for my article writing this is exactly what i want.  Here is the screenshot:\nA lot of people will want the Username, Hostname, for my example i don\u2019t!  But you can use \\u and \\h for that.  I used \\w to show what directory i am in. You can also show date and time, etc.\nYou can also play with setting colors in the prompt with these variables:\nForeground Colors:\n\\e[30m \u2013 Black\n\\e[31m \u2013 Red\n\\e[32m \u2013 Green\n\\e[33m \u2013 Yellow\n\\e[34m \u2013 Blue\n\\e[35m \u2013 Magenta\n\\e[36m \u2013 Cyan\n\\e[37m \u2013 White\nBackground Colors:\n\\e[40m \u2013 Black\n\\e[41m \u2013 Red\n\\e[42m \u2013 Green\n\\e[43m \u2013 Yellow\n\\e[44m \u2013 Blue\n\\e[45m \u2013 Magenta\n\\e[46m \u2013 Cyan\n\\e[47m \u2013 White\nReset Color:\n\\e[0m \u2013 Reset to default\nHere is my colorful version.  The backslashes are primarily needed to ensure proper formatting of the prompt and avoid breaking its functionality.\nexport PS1=\"\\[\\e[35m\\]linuxhint\\[\\e[0m\\]@\\[\\e[34m\\]mybox\\[\\e[0m\\] \\[\\e[31m\\]\\w\\[\\e[0m\\]: \"\nThis uses Magenta, Blue and Red coloring for different parts of the prompt.\nConclusion\nYou can see how to customize your bash prompt with PS1 environment in Ubuntu.  Hope this helps you be happy with your environment in linux.\nAbout the author\nLinux Wolfman\nLinux Wolfman is interested in Operating Systems, File Systems, Databases and Analytics and always watching for new technologies and trends.  Reach me by tweeting to\n@linuxhint\nand ask for the Wolfman.\nView all posts\nRELATED LINUX HINT POSTS\nHow to Change Your Prompt in Bash Shell in Ubuntu\nHow to Install Steam on Ubuntu 24.04\nHow to Install VirtualBox on Ubuntu 24.04\nInstall MySQL on Ubuntu 24.04\nInstall Conda on Ubuntu 24.04\nInstall Java on Ubuntu 24.04\nInstall NPM on Ubuntu 24.04\nLinux Hint LLC,\n[email\u00a0protected]\n1210 Kelly Park Circle, Morgan Hill, CA 95037\nPrivacy Policy\nand\nTerms of Use"
  }
]